{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/again/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/again/source/css/app.scss","path":"css/app.scss","modified":0,"renderable":1},{"_id":"themes/again/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/again/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/again/source/images/banner-small.png","path":"images/banner-small.png","modified":0,"renderable":1},{"_id":"themes/again/source/images/banner-large.png","path":"images/banner-large.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/again/README.md","hash":"71396c4147a14f871ebb74f8bc57c7d55a5b7a70","modified":1470222434000},{"_id":"themes/again/.DS_Store","hash":"570d9e78d2048516e4d4e5708f636dc658b1d6ec","modified":1470223811000},{"_id":"source/.DS_Store","hash":"da9b8dcebff696318c413f0df3d9379211779254","modified":1470402449000},{"_id":"themes/again/_config.yml","hash":"5a517b7ad98a789585fdf8c30e79e4e8a0bc5864","modified":1470222827000},{"_id":"source/_posts/6-things-to-do-before-i-graduate.md","hash":"34bc1567c8b0f7395d5e8078b1bec21293f74bfb","modified":1470402834000},{"_id":"source/_posts/coffee-summers-and-gsoc.md","hash":"5ad64705421de0d682ba8a990d8ffc29904b8fea","modified":1470402858000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1470399948000},{"_id":"themes/again/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1470222428000},{"_id":"themes/again/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1470222434000},{"_id":"themes/again/.git/config","hash":"08e0b6b92c013d0b238258d3c3087e767acade11","modified":1470222434000},{"_id":"themes/again/.git/index","hash":"8e654ee389bb94f453f853051e53603c0d61abba","modified":1470402684000},{"_id":"themes/again/.git/packed-refs","hash":"f3882fbdee1f49d45ec32c17e823fc8a3f10b153","modified":1470222434000},{"_id":"themes/again/layout/layout.ejs","hash":"bfe888472313a2edc8b7db3190b1802d580fc2bd","modified":1470222434000},{"_id":"themes/again/layout/archive.ejs","hash":"1f8724a48ab2ef61182b8a930e3998f833eb1487","modified":1470222434000},{"_id":"themes/again/layout/index.ejs","hash":"b87edba726df46b991bcaa153c1a222080f991e9","modified":1470222434000},{"_id":"themes/again/layout/page.ejs","hash":"b1c9235cd9ccff78c4dc15608a708e4a74433d46","modified":1470222434000},{"_id":"themes/again/layout/post.ejs","hash":"fa55c7bed8d3ac20e3911140d5252b9184ca3b14","modified":1470222434000},{"_id":"themes/again/source/.DS_Store","hash":"08aad938b208329e6164112edfb6e0f5a5b3ace7","modified":1470223817000},{"_id":"themes/again/source/favicon.ico","hash":"47f8c468756506ff0c9a1df1dcbc48c1ae54c81d","modified":1470222434000},{"_id":"source/_posts/6-things-to-do-before-i-graduate/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1470225562000},{"_id":"source/_posts/6-things-to-do-before-i-graduate/nko-logo.png","hash":"7cbd6c054dab2add8e5979d19bdbc3fd9077a17d","modified":1470200151000},{"_id":"source/_posts/6-things-to-do-before-i-graduate/gsoc.webp","hash":"d0b1e35b9efd37ea07baf85a3229823aeef713af","modified":1470200151000},{"_id":"themes/again/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1470222428000},{"_id":"themes/again/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1470222428000},{"_id":"themes/again/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1470222428000},{"_id":"themes/again/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1470222428000},{"_id":"themes/again/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1470222428000},{"_id":"themes/again/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1470222428000},{"_id":"themes/again/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1470222428000},{"_id":"themes/again/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1470222428000},{"_id":"themes/again/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1470222428000},{"_id":"themes/again/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1470222428000},{"_id":"themes/again/.git/logs/HEAD","hash":"f368940890865e681a8937facfa4702e0a54fa8c","modified":1470222434000},{"_id":"themes/again/layout/_partial/archive.ejs","hash":"394b6f97a6860fe2e027fd0410e24187f9970d5a","modified":1470402683000},{"_id":"themes/again/layout/_partial/article.ejs","hash":"b65d93599fa7e18af428f31027e915209f1a8c8c","modified":1470223535000},{"_id":"themes/again/layout/_partial/footer.ejs","hash":"5ba7fc1a96449b06759457f95916f530db4b9490","modified":1470222434000},{"_id":"themes/again/layout/_partial/header.ejs","hash":"219c66b37b46bad660099e1516dbb6dcbab0a992","modified":1470222434000},{"_id":"themes/again/layout/_partial/head.ejs","hash":"90b414e1b02b9d16d13651721043cc2c914f42f4","modified":1470222434000},{"_id":"themes/again/layout/_partial/index.ejs","hash":"809676dc63d1056259049998396294688e7f7b16","modified":1470403378000},{"_id":"themes/again/layout/_partial/nav.ejs","hash":"9145acd2c9f3fcb5d1ed3d63ad6ad4b8a075b734","modified":1470222434000},{"_id":"themes/again/layout/_widget/back-to-home.ejs","hash":"6d3544def976676e38e10134cae071f44bbf67d7","modified":1470222434000},{"_id":"themes/again/layout/_widget/disqus.ejs","hash":"47eb63418da61245bf674cb1764419c2741e486b","modified":1470222434000},{"_id":"themes/again/layout/_widget/paginator.ejs","hash":"ed04dbcb0cc79733ac338c3fc2a8604d41eb0848","modified":1470222434000},{"_id":"themes/again/layout/_widget/sharing.ejs","hash":"8d50310cae2bd6531a3ba04b5c5188c616035359","modified":1470222434000},{"_id":"themes/again/layout/_widget/twitter.ejs","hash":"49acef5c7713af0dc27f3aa78b80cb6379d18262","modified":1470222434000},{"_id":"themes/again/source/css/_base.scss","hash":"095d9f7659f1dfcfd95a894e7c8faaf0de8f6d7c","modified":1470222434000},{"_id":"themes/again/source/css/_font.scss","hash":"3348cde2f82797bd92ab69405824f02472736698","modified":1470222434000},{"_id":"themes/again/source/css/app.scss","hash":"7b466635119bfb88c54532f4f88b8f824b5a6666","modified":1470222434000},{"_id":"themes/again/source/css/_variables.scss","hash":"643abf9d508a354b2386f47b0a5a5be5beff4e83","modified":1470222434000},{"_id":"themes/again/source/images/avatar.png","hash":"60d81ac876c5c4aa0e92dbed5abcdbed357c2bf4","modified":1470222434000},{"_id":"themes/again/source/js/app.js","hash":"8e00097211a064209ae0e9fb556920673f5b9a42","modified":1470222434000},{"_id":"themes/again/source/images/banner-small.png","hash":"4b87b439bbf9507f7bed53d7c2c1a22e07a064e8","modified":1470222434000},{"_id":"source/_posts/6-things-to-do-before-i-graduate/gaurav.jpg","hash":"2c99eaf7fc507a81eeb2c15df50bcad0b8c0950e","modified":1470200151000},{"_id":"source/_posts/6-things-to-do-before-i-graduate/goa.jpg","hash":"f39caef1845d7b20e2c52f449b677205d78c340f","modified":1470200151000},{"_id":"themes/again/.git/objects/pack/pack-fddfc275265a81d8bff5c364d8189d3b4a154228.idx","hash":"1ea3033768fb47fdec8f39a2c52afa344bccc5d2","modified":1470222434000},{"_id":"themes/again/.git/refs/heads/master","hash":"0e5e31d1c7f00d8a614dfe078a9412562359e8ab","modified":1470222434000},{"_id":"themes/again/source/css/_partial/article.scss","hash":"5e798f7d99baf2b6025c8888bb386eb3f7ae7fb0","modified":1470222434000},{"_id":"themes/again/source/css/_helper/index.scss","hash":"8c35cff7ea4785042f6116f28b09ea8ffc087255","modified":1470222434000},{"_id":"themes/again/source/css/_helper/grid.scss","hash":"d290e1315dc8dc3509e26fb5e4ff55eb277e6e84","modified":1470222434000},{"_id":"themes/again/source/css/_partial/archive.scss","hash":"b358e1a0e51ebea6ea5aee80447644baaa463723","modified":1470222434000},{"_id":"themes/again/source/css/_partial/index.scss","hash":"8987eb42bcd1817835e584b8c4ff1daaace49fbe","modified":1470403390000},{"_id":"themes/again/source/css/_partial/nav.scss","hash":"d66e6ae75faaa0bf77c481264e9109714007b1f8","modified":1470222434000},{"_id":"themes/again/source/css/_partial/footer.scss","hash":"f1ecaa07e5920eede1c2e0b7bfbfe1b3a8f8fb5c","modified":1470222434000},{"_id":"themes/again/source/css/_partial/header.scss","hash":"73d105ffe3e48b45f8bb9f18a4fbb843d047eb8d","modified":1470222434000},{"_id":"themes/again/source/css/_partial/partials.scss","hash":"5fd002673fcd254a600b0d034c9eba03033715a4","modified":1470222434000},{"_id":"themes/again/source/css/_partial/page.scss","hash":"b576caf22a0d0b9b872ad54dbd0ab2c16a104b86","modified":1470222434000},{"_id":"themes/again/source/css/_widget/back-to-home.scss","hash":"d60425bff8e9cbed9f0f0a9827cbc567f994fb14","modified":1470222434000},{"_id":"themes/again/source/css/_widget/highlight.scss","hash":"5c4fd1e0bb39b3ab7232d650bbbdf50960d960b7","modified":1470222434000},{"_id":"themes/again/source/css/_widget/sharing.scss","hash":"38f54a9aa48654e4dad44535918550098aa913a6","modified":1470222434000},{"_id":"themes/again/source/css/_widget/index.scss","hash":"5de4195cf47963fe68a15e16b7bb067970e0b83c","modified":1470222434000},{"_id":"themes/again/source/images/banner-large.png","hash":"3e91a135ca4c446301995aedc998784e035d485a","modified":1470222434000},{"_id":"themes/again/.git/logs/refs/heads/master","hash":"f368940890865e681a8937facfa4702e0a54fa8c","modified":1470222434000},{"_id":"themes/again/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1470222434000},{"_id":"source/_posts/6-things-to-do-before-i-graduate/anurag.jpg","hash":"0c90af49cc3ee6f9a10316c3f16380b8aa4dc649","modified":1470200151000},{"_id":"source/_posts/6-things-to-do-before-i-graduate/food.jpg","hash":"0fb7ca85f9ad04decbdb939c905d04019d34df00","modified":1470200151000},{"_id":"themes/again/.git/logs/refs/remotes/origin/HEAD","hash":"f368940890865e681a8937facfa4702e0a54fa8c","modified":1470222434000},{"_id":"themes/again/.git/objects/pack/pack-fddfc275265a81d8bff5c364d8189d3b4a154228.pack","hash":"aa88e9ff7f1db4a07dc7b367a3670810226419fc","modified":1470222434000},{"_id":"source/_posts/and-first-xmpp-video-call-was-made.md","hash":"8654d23ccda209d96a1961dd375ce4630528667b","modified":1470402845000},{"_id":"source/_posts/community-bonding-report.md","hash":"535c7cde20e8c6ec6d59d77948ee183e688bef22","modified":1470403054000},{"_id":"source/_posts/gsoc-report-understanding-xep-and-rfc-maze.md","hash":"20a6e24a607b23de2205c396c11f06e65f27a808","modified":1470402913000},{"_id":"source/_posts/gsoc-report-week-1.md","hash":"14317940b84ffa8ea0a62f3f00a5b4f64f91cee2","modified":1470403078000},{"_id":"source/_posts/gsoc-report-reaching-the-midterm.md","hash":"c76fdfdacffe99a1b8570ca839beae4677a7d43e","modified":1470402899000},{"_id":"source/_posts/implementing-entitiy-discovery-part-2.md","hash":"eb2dc26cac5633d210f5f902141f49b2bbe729d1","modified":1470402965000},{"_id":"source/_posts/implementing-entitiy-discovery-part-1.md","hash":"4282ea5e2a85cf69cfd25426fa30a1b4055fe9c0","modified":1470402952000},{"_id":"source/_posts/gsoc-progress-report.md","hash":"5d33a1539b9f4924baa24a7691432f83e6389b71","modified":1470403002000},{"_id":"source/_posts/gsoc-wrap-up.md","hash":"db8abf7436235d71d3e6f702e8f6a2b35cccbaf4","modified":1470402933000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"6 Things to Do Before I Graduate","date":"2013-12-01T11:46:18.000Z","foreword":"My college days will be gone in 16 months. Learning some of the most unusual stuffs, having fun with amazing friends, night outs and many unsaid stories. I have lived a life in these three short years.","_content":"My college days will be gone in 16 months. Learning some of the most unusual stuffs, having fun with amazing friends, night outs and many unsaid stories. I have lived a life in these three short years.\n\nThough I have had my time but there are still a few things I wish to flag before I complete my graduation. Here are 7 things I wish to do:\n\n## 1\\. Google Summer of Code\nNothing is better than devoting your time and hard work for open source projects. And to be honest no one does it better than Google when it comes to helping the open source institutions. Its the one damn thing I need right now. I have been contributing for Mozilla’s open source projects as a noob and want to work my ass off to be a GSoCer.\n\n## 2\\. Win Node Knockout  \nI participated in Node Knockout this year. But due to my extremely slow Internet (30 kbps almost) I was unable to finish it off. I will be trying again for NKO 2014 and hope for the best!\n\n## 3\\. One time dinner for Mom and Dad\nIn the coming holidays I want to prepare one time exclusive dinner for my parents all by myself. I never appreciated eating and enjoying food but [Remy from Ratatouille](http://en.wikipedia.org/wiki/Ratatouille_(film)) taught me what its like to eat good food! I want to thank them in my way for the love :)\n\n## 4\\. Learn LISP\nI always tried to learn a language which is Godly enough to help me understand what programming actually is. [BrainFuck](http://www.muppetlabs.com/~breadbox/bf/) was one such which taught me the thinking of the computer. As far as LISP is concerned I have a few failed attempts already. It is said about LISP that\n\n> The more one gets closer to creating a programming language he is actually converging towards the formation of LISP.\n\nThough I don’t have enough time left yet I will still try to learn at least the basics.\n\n## 5\\. Meet these guys again!\nAnurag Sharma and Gaurav Singh – my college seniors who taught me how to code! I want to meet these guys again :D\n\n## 6\\. Go Goa  \n\nI wish to have a fun filled Goa trip with my friends.\n\n> Goa is like a fridge, because everyone just chills here!","source":"_posts/6-things-to-do-before-i-graduate.md","raw":"---\ntitle: 6 Things to Do Before I Graduate\ndate: 2013-12-01 17:16:18\nforeword: My college days will be gone in 16 months. Learning some of the most unusual stuffs, having fun with amazing friends, night outs and many unsaid stories. I have lived a life in these three short years.\n---\nMy college days will be gone in 16 months. Learning some of the most unusual stuffs, having fun with amazing friends, night outs and many unsaid stories. I have lived a life in these three short years.\n\nThough I have had my time but there are still a few things I wish to flag before I complete my graduation. Here are 7 things I wish to do:\n\n## 1\\. Google Summer of Code\nNothing is better than devoting your time and hard work for open source projects. And to be honest no one does it better than Google when it comes to helping the open source institutions. Its the one damn thing I need right now. I have been contributing for Mozilla’s open source projects as a noob and want to work my ass off to be a GSoCer.\n\n## 2\\. Win Node Knockout  \nI participated in Node Knockout this year. But due to my extremely slow Internet (30 kbps almost) I was unable to finish it off. I will be trying again for NKO 2014 and hope for the best!\n\n## 3\\. One time dinner for Mom and Dad\nIn the coming holidays I want to prepare one time exclusive dinner for my parents all by myself. I never appreciated eating and enjoying food but [Remy from Ratatouille](http://en.wikipedia.org/wiki/Ratatouille_(film)) taught me what its like to eat good food! I want to thank them in my way for the love :)\n\n## 4\\. Learn LISP\nI always tried to learn a language which is Godly enough to help me understand what programming actually is. [BrainFuck](http://www.muppetlabs.com/~breadbox/bf/) was one such which taught me the thinking of the computer. As far as LISP is concerned I have a few failed attempts already. It is said about LISP that\n\n> The more one gets closer to creating a programming language he is actually converging towards the formation of LISP.\n\nThough I don’t have enough time left yet I will still try to learn at least the basics.\n\n## 5\\. Meet these guys again!\nAnurag Sharma and Gaurav Singh – my college seniors who taught me how to code! I want to meet these guys again :D\n\n## 6\\. Go Goa  \n\nI wish to have a fun filled Goa trip with my friends.\n\n> Goa is like a fridge, because everyone just chills here!","slug":"6-things-to-do-before-i-graduate","published":1,"updated":"2016-08-05T13:13:54.000Z","_id":"cirhq01ma0000kyv543wgpf88","comments":1,"layout":"post","photos":[],"link":"","content":"<p>My college days will be gone in 16 months. Learning some of the most unusual stuffs, having fun with amazing friends, night outs and many unsaid stories. I have lived a life in these three short years.</p>\n<p>Though I have had my time but there are still a few things I wish to flag before I complete my graduation. Here are 7 things I wish to do:</p>\n<h2 id=\"1-Google-Summer-of-Code\"><a href=\"#1-Google-Summer-of-Code\" class=\"headerlink\" title=\"1. Google Summer of Code\"></a>1. Google Summer of Code</h2><p>Nothing is better than devoting your time and hard work for open source projects. And to be honest no one does it better than Google when it comes to helping the open source institutions. Its the one damn thing I need right now. I have been contributing for Mozilla’s open source projects as a noob and want to work my ass off to be a GSoCer.</p>\n<h2 id=\"2-Win-Node-Knockout\"><a href=\"#2-Win-Node-Knockout\" class=\"headerlink\" title=\"2. Win Node Knockout\"></a>2. Win Node Knockout</h2><p>I participated in Node Knockout this year. But due to my extremely slow Internet (30 kbps almost) I was unable to finish it off. I will be trying again for NKO 2014 and hope for the best!</p>\n<h2 id=\"3-One-time-dinner-for-Mom-and-Dad\"><a href=\"#3-One-time-dinner-for-Mom-and-Dad\" class=\"headerlink\" title=\"3. One time dinner for Mom and Dad\"></a>3. One time dinner for Mom and Dad</h2><p>In the coming holidays I want to prepare one time exclusive dinner for my parents all by myself. I never appreciated eating and enjoying food but <a href=\"http://en.wikipedia.org/wiki/Ratatouille_(film\" target=\"_blank\" rel=\"external\">Remy from Ratatouille</a>) taught me what its like to eat good food! I want to thank them in my way for the love :)</p>\n<h2 id=\"4-Learn-LISP\"><a href=\"#4-Learn-LISP\" class=\"headerlink\" title=\"4. Learn LISP\"></a>4. Learn LISP</h2><p>I always tried to learn a language which is Godly enough to help me understand what programming actually is. <a href=\"http://www.muppetlabs.com/~breadbox/bf/\" target=\"_blank\" rel=\"external\">BrainFuck</a> was one such which taught me the thinking of the computer. As far as LISP is concerned I have a few failed attempts already. It is said about LISP that</p>\n<blockquote>\n<p>The more one gets closer to creating a programming language he is actually converging towards the formation of LISP.</p>\n</blockquote>\n<p>Though I don’t have enough time left yet I will still try to learn at least the basics.</p>\n<h2 id=\"5-Meet-these-guys-again\"><a href=\"#5-Meet-these-guys-again\" class=\"headerlink\" title=\"5. Meet these guys again!\"></a>5. Meet these guys again!</h2><p>Anurag Sharma and Gaurav Singh – my college seniors who taught me how to code! I want to meet these guys again :D</p>\n<h2 id=\"6-Go-Goa\"><a href=\"#6-Go-Goa\" class=\"headerlink\" title=\"6. Go Goa\"></a>6. Go Goa</h2><p>I wish to have a fun filled Goa trip with my friends.</p>\n<blockquote>\n<p>Goa is like a fridge, because everyone just chills here!</p>\n</blockquote>\n","excerpt":"","more":"<p>My college days will be gone in 16 months. Learning some of the most unusual stuffs, having fun with amazing friends, night outs and many unsaid stories. I have lived a life in these three short years.</p>\n<p>Though I have had my time but there are still a few things I wish to flag before I complete my graduation. Here are 7 things I wish to do:</p>\n<h2 id=\"1-Google-Summer-of-Code\"><a href=\"#1-Google-Summer-of-Code\" class=\"headerlink\" title=\"1. Google Summer of Code\"></a>1. Google Summer of Code</h2><p>Nothing is better than devoting your time and hard work for open source projects. And to be honest no one does it better than Google when it comes to helping the open source institutions. Its the one damn thing I need right now. I have been contributing for Mozilla’s open source projects as a noob and want to work my ass off to be a GSoCer.</p>\n<h2 id=\"2-Win-Node-Knockout\"><a href=\"#2-Win-Node-Knockout\" class=\"headerlink\" title=\"2. Win Node Knockout\"></a>2. Win Node Knockout</h2><p>I participated in Node Knockout this year. But due to my extremely slow Internet (30 kbps almost) I was unable to finish it off. I will be trying again for NKO 2014 and hope for the best!</p>\n<h2 id=\"3-One-time-dinner-for-Mom-and-Dad\"><a href=\"#3-One-time-dinner-for-Mom-and-Dad\" class=\"headerlink\" title=\"3. One time dinner for Mom and Dad\"></a>3. One time dinner for Mom and Dad</h2><p>In the coming holidays I want to prepare one time exclusive dinner for my parents all by myself. I never appreciated eating and enjoying food but <a href=\"http://en.wikipedia.org/wiki/Ratatouille_(film\">Remy from Ratatouille</a>) taught me what its like to eat good food! I want to thank them in my way for the love :)</p>\n<h2 id=\"4-Learn-LISP\"><a href=\"#4-Learn-LISP\" class=\"headerlink\" title=\"4. Learn LISP\"></a>4. Learn LISP</h2><p>I always tried to learn a language which is Godly enough to help me understand what programming actually is. <a href=\"http://www.muppetlabs.com/~breadbox/bf/\">BrainFuck</a> was one such which taught me the thinking of the computer. As far as LISP is concerned I have a few failed attempts already. It is said about LISP that</p>\n<blockquote>\n<p>The more one gets closer to creating a programming language he is actually converging towards the formation of LISP.</p>\n</blockquote>\n<p>Though I don’t have enough time left yet I will still try to learn at least the basics.</p>\n<h2 id=\"5-Meet-these-guys-again\"><a href=\"#5-Meet-these-guys-again\" class=\"headerlink\" title=\"5. Meet these guys again!\"></a>5. Meet these guys again!</h2><p>Anurag Sharma and Gaurav Singh – my college seniors who taught me how to code! I want to meet these guys again :D</p>\n<h2 id=\"6-Go-Goa\"><a href=\"#6-Go-Goa\" class=\"headerlink\" title=\"6. Go Goa\"></a>6. Go Goa</h2><p>I wish to have a fun filled Goa trip with my friends.</p>\n<blockquote>\n<p>Goa is like a fridge, because everyone just chills here!</p>\n</blockquote>\n"},{"title":"Coffee Summers and GSoC","date":"2014-04-22T11:46:18.000Z","foreword":"Upon making my way this year to Google Summer of Code 2014, I’ll be working for Mozilla’s project Instantbird. My task is to add video and voice calling support to the XMPP protocol using WebRTC.","_content":"Upon making my way this year to Google Summer of Code 2014, I’ll be working for Mozilla’s project Instantbird. My task is to add video and voice calling support to the XMPP protocol using WebRTC. My detailed proposal is available [here](https://docs.google.com/document/d/1qbcWc1v5H_t0MzezNkvmzxM1wt0jvZI4vJG3CxCZR4A/edit?usp=sharing).\n\n### About Instantbird:\n\n[![Instantbird](http://instantbird.com/images/instantbird-logo.png)](http://instantbird.com)  \nFor all those who don’t know about this amazing chat client, [Instantbird](http://instantbird.com) is a Mozilla Firefox based multiple chat client for Windows, Mac and Linux which supports protocols like XMPP, GTalk, Yahoo, Facebook, IRC, ICQ and multiple others. It is simple and powerful and can be used to manage all Real Time Communications.\n\nHoping to make the most of it this summer!","source":"_posts/coffee-summers-and-gsoc.md","raw":"---\ntitle: Coffee Summers and GSoC\ndate: 2014-04-22 17:16:18\nforeword: Upon making my way this year to Google Summer of Code 2014, I’ll be working for Mozilla’s project Instantbird. My task is to add video and voice calling support to the XMPP protocol using WebRTC.\n---\nUpon making my way this year to Google Summer of Code 2014, I’ll be working for Mozilla’s project Instantbird. My task is to add video and voice calling support to the XMPP protocol using WebRTC. My detailed proposal is available [here](https://docs.google.com/document/d/1qbcWc1v5H_t0MzezNkvmzxM1wt0jvZI4vJG3CxCZR4A/edit?usp=sharing).\n\n### About Instantbird:\n\n[![Instantbird](http://instantbird.com/images/instantbird-logo.png)](http://instantbird.com)  \nFor all those who don’t know about this amazing chat client, [Instantbird](http://instantbird.com) is a Mozilla Firefox based multiple chat client for Windows, Mac and Linux which supports protocols like XMPP, GTalk, Yahoo, Facebook, IRC, ICQ and multiple others. It is simple and powerful and can be used to manage all Real Time Communications.\n\nHoping to make the most of it this summer!","slug":"coffee-summers-and-gsoc","published":1,"updated":"2016-08-05T13:14:18.000Z","_id":"cirhq01mf0001kyv5o8syfqyq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Upon making my way this year to Google Summer of Code 2014, I’ll be working for Mozilla’s project Instantbird. My task is to add video and voice calling support to the XMPP protocol using WebRTC. My detailed proposal is available <a href=\"https://docs.google.com/document/d/1qbcWc1v5H_t0MzezNkvmzxM1wt0jvZI4vJG3CxCZR4A/edit?usp=sharing\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h3 id=\"About-Instantbird\"><a href=\"#About-Instantbird\" class=\"headerlink\" title=\"About Instantbird:\"></a>About Instantbird:</h3><p><a href=\"http://instantbird.com\" target=\"_blank\" rel=\"external\"><img src=\"http://instantbird.com/images/instantbird-logo.png\" alt=\"Instantbird\"></a><br>For all those who don’t know about this amazing chat client, <a href=\"http://instantbird.com\" target=\"_blank\" rel=\"external\">Instantbird</a> is a Mozilla Firefox based multiple chat client for Windows, Mac and Linux which supports protocols like XMPP, GTalk, Yahoo, Facebook, IRC, ICQ and multiple others. It is simple and powerful and can be used to manage all Real Time Communications.</p>\n<p>Hoping to make the most of it this summer!</p>\n","excerpt":"","more":"<p>Upon making my way this year to Google Summer of Code 2014, I’ll be working for Mozilla’s project Instantbird. My task is to add video and voice calling support to the XMPP protocol using WebRTC. My detailed proposal is available <a href=\"https://docs.google.com/document/d/1qbcWc1v5H_t0MzezNkvmzxM1wt0jvZI4vJG3CxCZR4A/edit?usp=sharing\">here</a>.</p>\n<h3 id=\"About-Instantbird\"><a href=\"#About-Instantbird\" class=\"headerlink\" title=\"About Instantbird:\"></a>About Instantbird:</h3><p><a href=\"http://instantbird.com\"><img src=\"http://instantbird.com/images/instantbird-logo.png\" alt=\"Instantbird\"></a><br>For all those who don’t know about this amazing chat client, <a href=\"http://instantbird.com\">Instantbird</a> is a Mozilla Firefox based multiple chat client for Windows, Mac and Linux which supports protocols like XMPP, GTalk, Yahoo, Facebook, IRC, ICQ and multiple others. It is simple and powerful and can be used to manage all Real Time Communications.</p>\n<p>Hoping to make the most of it this summer!</p>\n"},{"title":"Community Bonding Report","date":"2014-05-21T11:46:18.000Z","foreword":"After being selected I had one fundamental task for the community bonding period, to become familiar with the Instantbird codebase as much as possible.","_content":"After being selected I had one fundamental task for the community bonding period, to become familiar with the [Instantbird codebase](http://hg.mozilla.org/comm-central/file/) as much as possible. The discussion about the project with my mentor [Benedikt P.[:Mic]](https://mozillians.org/en-US/u/benediktp/) and the Instantbird team lies in the [Etherpad](https://etherpad.mozilla.org/ib-webrtc) and a track of my progress and mockups I created for the project resides in the [Trello](https://trello.com/b/knpAD9if/ib-webrtc-2014) page.\n\nI started working on the enhancement [Bug 975542](https://bugzilla.mozilla.org/show_bug.cgi?id=975542) I filed. It taught me some of the most basic things about writing good code, XUL, CSS, getUserMedia, mozGetUserMedia (freaked us out for a day), File.write. Eventually it took more time than we thought as new features kept brainstorming but still I’m happy as its almost ready and would be added in the nightlies soon.\n\n*   Wrote XUL code for creating a panel for the enhancement.\n*   Create video frame in canvas –> capture a single frame –> clip it to suit as square icon.\n*   Write the image to a tmp image file and copy it to profile directory –> remove tmp file (we are generous ;) ) –> set the image as user icon (already had code for that).\n*   Media devices detection using mozGetUserMediaDevices to disable the button if no video capturing device found. I’ll blog about it someday.\n\nFlorian has already written a patch a year ago for video call using WebRTC in Thunderbird Chat. I looked at it and had an understanding about how the RTCPeerConnection API would work. Also the enhancement [Bug 1004930](https://bugzilla.mozilla.org/show_bug.cgi?id=1004930) to develop a generic way to add action buttons to a conversation has been added with my project.\n\nDo not use vague language, say “No I don’t understand” if you don’t understand it, take pleasure in saying thanks :) , pastebin it, Firefox pref settings are life saver… are few other lessons I learnt during CB which I’m sure is going to help me in future.\n\nMay the force `to write more code + more tests + more comments` be with you.","source":"_posts/community-bonding-report.md","raw":"---\ntitle: Community Bonding Report\ndate: 2014-05-21 17:16:18\nforeword: After being selected I had one fundamental task for the community bonding period, to become familiar with the Instantbird codebase as much as possible.\n---\nAfter being selected I had one fundamental task for the community bonding period, to become familiar with the [Instantbird codebase](http://hg.mozilla.org/comm-central/file/) as much as possible. The discussion about the project with my mentor [Benedikt P.[:Mic]](https://mozillians.org/en-US/u/benediktp/) and the Instantbird team lies in the [Etherpad](https://etherpad.mozilla.org/ib-webrtc) and a track of my progress and mockups I created for the project resides in the [Trello](https://trello.com/b/knpAD9if/ib-webrtc-2014) page.\n\nI started working on the enhancement [Bug 975542](https://bugzilla.mozilla.org/show_bug.cgi?id=975542) I filed. It taught me some of the most basic things about writing good code, XUL, CSS, getUserMedia, mozGetUserMedia (freaked us out for a day), File.write. Eventually it took more time than we thought as new features kept brainstorming but still I’m happy as its almost ready and would be added in the nightlies soon.\n\n*   Wrote XUL code for creating a panel for the enhancement.\n*   Create video frame in canvas –> capture a single frame –> clip it to suit as square icon.\n*   Write the image to a tmp image file and copy it to profile directory –> remove tmp file (we are generous ;) ) –> set the image as user icon (already had code for that).\n*   Media devices detection using mozGetUserMediaDevices to disable the button if no video capturing device found. I’ll blog about it someday.\n\nFlorian has already written a patch a year ago for video call using WebRTC in Thunderbird Chat. I looked at it and had an understanding about how the RTCPeerConnection API would work. Also the enhancement [Bug 1004930](https://bugzilla.mozilla.org/show_bug.cgi?id=1004930) to develop a generic way to add action buttons to a conversation has been added with my project.\n\nDo not use vague language, say “No I don’t understand” if you don’t understand it, take pleasure in saying thanks :) , pastebin it, Firefox pref settings are life saver… are few other lessons I learnt during CB which I’m sure is going to help me in future.\n\nMay the force `to write more code + more tests + more comments` be with you.","slug":"community-bonding-report","published":1,"updated":"2016-08-05T13:17:34.000Z","_id":"cirhq5zg20002kyv5rm5yrrlb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>After being selected I had one fundamental task for the community bonding period, to become familiar with the <a href=\"http://hg.mozilla.org/comm-central/file/\" target=\"_blank\" rel=\"external\">Instantbird codebase</a> as much as possible. The discussion about the project with my mentor <a href=\"https://mozillians.org/en-US/u/benediktp/\" target=\"_blank\" rel=\"external\">Benedikt P.[:Mic]</a> and the Instantbird team lies in the <a href=\"https://etherpad.mozilla.org/ib-webrtc\" target=\"_blank\" rel=\"external\">Etherpad</a> and a track of my progress and mockups I created for the project resides in the <a href=\"https://trello.com/b/knpAD9if/ib-webrtc-2014\" target=\"_blank\" rel=\"external\">Trello</a> page.</p>\n<p>I started working on the enhancement <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=975542\" target=\"_blank\" rel=\"external\">Bug 975542</a> I filed. It taught me some of the most basic things about writing good code, XUL, CSS, getUserMedia, mozGetUserMedia (freaked us out for a day), File.write. Eventually it took more time than we thought as new features kept brainstorming but still I’m happy as its almost ready and would be added in the nightlies soon.</p>\n<ul>\n<li>Wrote XUL code for creating a panel for the enhancement.</li>\n<li>Create video frame in canvas –&gt; capture a single frame –&gt; clip it to suit as square icon.</li>\n<li>Write the image to a tmp image file and copy it to profile directory –&gt; remove tmp file (we are generous ;) ) –&gt; set the image as user icon (already had code for that).</li>\n<li>Media devices detection using mozGetUserMediaDevices to disable the button if no video capturing device found. I’ll blog about it someday.</li>\n</ul>\n<p>Florian has already written a patch a year ago for video call using WebRTC in Thunderbird Chat. I looked at it and had an understanding about how the RTCPeerConnection API would work. Also the enhancement <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1004930\" target=\"_blank\" rel=\"external\">Bug 1004930</a> to develop a generic way to add action buttons to a conversation has been added with my project.</p>\n<p>Do not use vague language, say “No I don’t understand” if you don’t understand it, take pleasure in saying thanks :) , pastebin it, Firefox pref settings are life saver… are few other lessons I learnt during CB which I’m sure is going to help me in future.</p>\n<p>May the force <code>to write more code + more tests + more comments</code> be with you.</p>\n","excerpt":"","more":"<p>After being selected I had one fundamental task for the community bonding period, to become familiar with the <a href=\"http://hg.mozilla.org/comm-central/file/\">Instantbird codebase</a> as much as possible. The discussion about the project with my mentor <a href=\"https://mozillians.org/en-US/u/benediktp/\">Benedikt P.[:Mic]</a> and the Instantbird team lies in the <a href=\"https://etherpad.mozilla.org/ib-webrtc\">Etherpad</a> and a track of my progress and mockups I created for the project resides in the <a href=\"https://trello.com/b/knpAD9if/ib-webrtc-2014\">Trello</a> page.</p>\n<p>I started working on the enhancement <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=975542\">Bug 975542</a> I filed. It taught me some of the most basic things about writing good code, XUL, CSS, getUserMedia, mozGetUserMedia (freaked us out for a day), File.write. Eventually it took more time than we thought as new features kept brainstorming but still I’m happy as its almost ready and would be added in the nightlies soon.</p>\n<ul>\n<li>Wrote XUL code for creating a panel for the enhancement.</li>\n<li>Create video frame in canvas –&gt; capture a single frame –&gt; clip it to suit as square icon.</li>\n<li>Write the image to a tmp image file and copy it to profile directory –&gt; remove tmp file (we are generous ;) ) –&gt; set the image as user icon (already had code for that).</li>\n<li>Media devices detection using mozGetUserMediaDevices to disable the button if no video capturing device found. I’ll blog about it someday.</li>\n</ul>\n<p>Florian has already written a patch a year ago for video call using WebRTC in Thunderbird Chat. I looked at it and had an understanding about how the RTCPeerConnection API would work. Also the enhancement <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1004930\">Bug 1004930</a> to develop a generic way to add action buttons to a conversation has been added with my project.</p>\n<p>Do not use vague language, say “No I don’t understand” if you don’t understand it, take pleasure in saying thanks :) , pastebin it, Firefox pref settings are life saver… are few other lessons I learnt during CB which I’m sure is going to help me in future.</p>\n<p>May the force <code>to write more code + more tests + more comments</code> be with you.</p>\n"},{"title":"GSoC Report - Week 1","date":"2014-05-29T11:46:18.000Z","foreword":"In the first week I made progress with the Bug 975542 to add image capturing support to set user icon and it is in its final stage. I have mentioned the details about the bug in the last post.","_content":"In the first week I made progress with the [Bug 975542](https://bugzilla.mozilla.org/show_bug.cgi?id=975542) to add image capturing support to set user icon and it is in its final stage. I have mentioned the details about the bug in the [last post](../community-bonding-report/). Some of the major changes that were made include:\n\n* The UI is closer to the Australis menu of Ff and has a better space management.\n* The video is overlayed and image is clipped so that consistency of the icon is maintained throughout the panel.\n* mozGetUserMediaDevices is dependent on getUserMedia, so we have a temporary fix to detect the webcam device attached.\n* The panel is to be tested for accessibility with the screen reader for the blind and vision impaired people.\n\nTook another enhancement [Bug 1004930](https://bugzilla.mozilla.org/show_bug.cgi?id=1004930) to develop a generic method to add conversation toolbar buttons as we would be needing this for different new features we are going to develop this summers.\n\n* Instead of writing separate `toolbarbutton` for each item in `\"conv-info-large\"` and `\"conv-info-small\"` binding we now have a `children` element which automatically inherits the generated content and merge the XML element to the XBL content which makes it easier for us to add buttons.\n* The toolbarbutton should be discoverable. So we decided to have one like the new Firefox Toolbar buttons. New buttons can now easily be added and modified. Since adding panel was out of scope for this bug I’ll do it in the coming days.\n\nIn the next week I plan to work on adding video call for XMPP protocol with support to recieve and end calls. I’ll file a bug for it soon.","source":"_posts/gsoc-report-week-1.md","raw":"---\ntitle: GSoC Report - Week 1\ndate: 2014-05-29 17:16:18\nforeword: In the first week I made progress with the Bug 975542 to add image capturing support to set user icon and it is in its final stage. I have mentioned the details about the bug in the last post.\n---\nIn the first week I made progress with the [Bug 975542](https://bugzilla.mozilla.org/show_bug.cgi?id=975542) to add image capturing support to set user icon and it is in its final stage. I have mentioned the details about the bug in the [last post](../community-bonding-report/). Some of the major changes that were made include:\n\n* The UI is closer to the Australis menu of Ff and has a better space management.\n* The video is overlayed and image is clipped so that consistency of the icon is maintained throughout the panel.\n* mozGetUserMediaDevices is dependent on getUserMedia, so we have a temporary fix to detect the webcam device attached.\n* The panel is to be tested for accessibility with the screen reader for the blind and vision impaired people.\n\nTook another enhancement [Bug 1004930](https://bugzilla.mozilla.org/show_bug.cgi?id=1004930) to develop a generic method to add conversation toolbar buttons as we would be needing this for different new features we are going to develop this summers.\n\n* Instead of writing separate `toolbarbutton` for each item in `\"conv-info-large\"` and `\"conv-info-small\"` binding we now have a `children` element which automatically inherits the generated content and merge the XML element to the XBL content which makes it easier for us to add buttons.\n* The toolbarbutton should be discoverable. So we decided to have one like the new Firefox Toolbar buttons. New buttons can now easily be added and modified. Since adding panel was out of scope for this bug I’ll do it in the coming days.\n\nIn the next week I plan to work on adding video call for XMPP protocol with support to recieve and end calls. I’ll file a bug for it soon.","slug":"gsoc-report-week-1","published":1,"updated":"2016-08-05T13:17:58.000Z","_id":"cirhq7db10003kyv5m2ygn9v0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In the first week I made progress with the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=975542\" target=\"_blank\" rel=\"external\">Bug 975542</a> to add image capturing support to set user icon and it is in its final stage. I have mentioned the details about the bug in the <a href=\"../community-bonding-report/\">last post</a>. Some of the major changes that were made include:</p>\n<ul>\n<li>The UI is closer to the Australis menu of Ff and has a better space management.</li>\n<li>The video is overlayed and image is clipped so that consistency of the icon is maintained throughout the panel.</li>\n<li>mozGetUserMediaDevices is dependent on getUserMedia, so we have a temporary fix to detect the webcam device attached.</li>\n<li>The panel is to be tested for accessibility with the screen reader for the blind and vision impaired people.</li>\n</ul>\n<p>Took another enhancement <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1004930\" target=\"_blank\" rel=\"external\">Bug 1004930</a> to develop a generic method to add conversation toolbar buttons as we would be needing this for different new features we are going to develop this summers.</p>\n<ul>\n<li>Instead of writing separate <code>toolbarbutton</code> for each item in <code>&quot;conv-info-large&quot;</code> and <code>&quot;conv-info-small&quot;</code> binding we now have a <code>children</code> element which automatically inherits the generated content and merge the XML element to the XBL content which makes it easier for us to add buttons.</li>\n<li>The toolbarbutton should be discoverable. So we decided to have one like the new Firefox Toolbar buttons. New buttons can now easily be added and modified. Since adding panel was out of scope for this bug I’ll do it in the coming days.</li>\n</ul>\n<p>In the next week I plan to work on adding video call for XMPP protocol with support to recieve and end calls. I’ll file a bug for it soon.</p>\n","excerpt":"","more":"<p>In the first week I made progress with the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=975542\">Bug 975542</a> to add image capturing support to set user icon and it is in its final stage. I have mentioned the details about the bug in the <a href=\"../community-bonding-report/\">last post</a>. Some of the major changes that were made include:</p>\n<ul>\n<li>The UI is closer to the Australis menu of Ff and has a better space management.</li>\n<li>The video is overlayed and image is clipped so that consistency of the icon is maintained throughout the panel.</li>\n<li>mozGetUserMediaDevices is dependent on getUserMedia, so we have a temporary fix to detect the webcam device attached.</li>\n<li>The panel is to be tested for accessibility with the screen reader for the blind and vision impaired people.</li>\n</ul>\n<p>Took another enhancement <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1004930\">Bug 1004930</a> to develop a generic method to add conversation toolbar buttons as we would be needing this for different new features we are going to develop this summers.</p>\n<ul>\n<li>Instead of writing separate <code>toolbarbutton</code> for each item in <code>&quot;conv-info-large&quot;</code> and <code>&quot;conv-info-small&quot;</code> binding we now have a <code>children</code> element which automatically inherits the generated content and merge the XML element to the XBL content which makes it easier for us to add buttons.</li>\n<li>The toolbarbutton should be discoverable. So we decided to have one like the new Firefox Toolbar buttons. New buttons can now easily be added and modified. Since adding panel was out of scope for this bug I’ll do it in the coming days.</li>\n</ul>\n<p>In the next week I plan to work on adding video call for XMPP protocol with support to recieve and end calls. I’ll file a bug for it soon.</p>\n"},{"title":"GSoC Report - Understanding the XEPs and RFCs Maze","date":"2014-06-08T11:46:18.000Z","foreword":"To send a message from one client to the other we need a signaling channel which provides a path for data transfer over the network. While working with WebRTC PeerConnection API for a web app no one worries about the channel since the SDP (Session Description Protocol) “offer” and “answer” is sent over a plaintext channel.","_content":"To send a message from one client to the other we need a signaling channel which provides a path for data transfer over the network. While working with WebRTC PeerConnection API for a web app no one worries about the channel since the SDP (Session Description Protocol) “offer” and “answer” is sent over a plaintext channel. But to implement RTCPeerConnection API for an XMPP account we need to send the message in the form of XML stanza through the Jingle channel. So the caller has to first convert the SDP offer into an XML stanza, send it over Jingle, callee receives the stanza, converts it back to original SDP offer and then repeat the same for his answer to the request.\n\nHere is how we broke this up and made it the Jingle way.\n\n1.  The first step was to get the plaintext [SDP offer](http://tools.ietf.org/html/rfc4566.html#section-1) and understand what each line and of it means, then create a suitable XML IQ Stanza for the same. We then finalized on using the [XEP-0320: Use of DTLS-SRTP in Jingle Sessions](http://xmpp.org/extensions/xep-0320.html) for creating the appropriate Stanza. We are also dependent on XEPs [0167](http://xmpp.org/extensions/xep-0167.html), [0293](http://xmpp.org/extensions/xep-0293.html#sdp-mapping) and [0294](http://xmpp.org/extensions/xep-0294.html#sdp-mapping). It needs a separate blogpost to explain about how the mapping was done as the information though available is sparse. I’ll write one in the next post.\n2.  Then we added a /call command for XMPP account which sends an IQ stanza to the receiver. We had an XML Stanza prototype we need to generate. So we created a sdp2xml() function which parses the plaintext offer and generates a suitable XML stanza for each offer it receives. It is a confusing part because different machines generates different offer depending on the media type present, so creating an equivalent stanza is tricky.\n3.  In the meantime I got confused between using a [Draft XEP: Jingle SDP Content](http://xmpp.org/extensions/inbox/jingle-sdp.html) and XEP: 0320 and badly messed things up. We finally made a good decision on going with the standard 0320.\n4.  The next part was to test the function developed. An xpcshell-test has been written for the sdp2xml().\n\nThe next task is to create a real SDP call offer whenever caller makes a call request —> covert it to IQ Stanza. For this we have decided to add a call button (generalized way of adding it is already developed) , create an interface between the UI and the XMPP backend which passes the offer as an argument to the sdp2xml() and then send the stanza. :)\n","source":"_posts/gsoc-report-understanding-xep-and-rfc-maze.md","raw":"---\ntitle: GSoC Report - Understanding the XEPs and RFCs Maze\ndate: 2014-06-8 17:16:18\nforeword: To send a message from one client to the other we need a signaling channel which provides a path for data transfer over the network. While working with WebRTC PeerConnection API for a web app no one worries about the channel since the SDP (Session Description Protocol) “offer” and “answer” is sent over a plaintext channel.\n---\nTo send a message from one client to the other we need a signaling channel which provides a path for data transfer over the network. While working with WebRTC PeerConnection API for a web app no one worries about the channel since the SDP (Session Description Protocol) “offer” and “answer” is sent over a plaintext channel. But to implement RTCPeerConnection API for an XMPP account we need to send the message in the form of XML stanza through the Jingle channel. So the caller has to first convert the SDP offer into an XML stanza, send it over Jingle, callee receives the stanza, converts it back to original SDP offer and then repeat the same for his answer to the request.\n\nHere is how we broke this up and made it the Jingle way.\n\n1.  The first step was to get the plaintext [SDP offer](http://tools.ietf.org/html/rfc4566.html#section-1) and understand what each line and of it means, then create a suitable XML IQ Stanza for the same. We then finalized on using the [XEP-0320: Use of DTLS-SRTP in Jingle Sessions](http://xmpp.org/extensions/xep-0320.html) for creating the appropriate Stanza. We are also dependent on XEPs [0167](http://xmpp.org/extensions/xep-0167.html), [0293](http://xmpp.org/extensions/xep-0293.html#sdp-mapping) and [0294](http://xmpp.org/extensions/xep-0294.html#sdp-mapping). It needs a separate blogpost to explain about how the mapping was done as the information though available is sparse. I’ll write one in the next post.\n2.  Then we added a /call command for XMPP account which sends an IQ stanza to the receiver. We had an XML Stanza prototype we need to generate. So we created a sdp2xml() function which parses the plaintext offer and generates a suitable XML stanza for each offer it receives. It is a confusing part because different machines generates different offer depending on the media type present, so creating an equivalent stanza is tricky.\n3.  In the meantime I got confused between using a [Draft XEP: Jingle SDP Content](http://xmpp.org/extensions/inbox/jingle-sdp.html) and XEP: 0320 and badly messed things up. We finally made a good decision on going with the standard 0320.\n4.  The next part was to test the function developed. An xpcshell-test has been written for the sdp2xml().\n\nThe next task is to create a real SDP call offer whenever caller makes a call request —> covert it to IQ Stanza. For this we have decided to add a call button (generalized way of adding it is already developed) , create an interface between the UI and the XMPP backend which passes the offer as an argument to the sdp2xml() and then send the stanza. :)\n","slug":"gsoc-report-understanding-xep-and-rfc-maze","published":1,"updated":"2016-08-05T13:15:13.000Z","_id":"cirhq9yyc0004kyv5c7o8oyto","comments":1,"layout":"post","photos":[],"link":"","content":"<p>To send a message from one client to the other we need a signaling channel which provides a path for data transfer over the network. While working with WebRTC PeerConnection API for a web app no one worries about the channel since the SDP (Session Description Protocol) “offer” and “answer” is sent over a plaintext channel. But to implement RTCPeerConnection API for an XMPP account we need to send the message in the form of XML stanza through the Jingle channel. So the caller has to first convert the SDP offer into an XML stanza, send it over Jingle, callee receives the stanza, converts it back to original SDP offer and then repeat the same for his answer to the request.</p>\n<p>Here is how we broke this up and made it the Jingle way.</p>\n<ol>\n<li>The first step was to get the plaintext <a href=\"http://tools.ietf.org/html/rfc4566.html#section-1\" target=\"_blank\" rel=\"external\">SDP offer</a> and understand what each line and of it means, then create a suitable XML IQ Stanza for the same. We then finalized on using the <a href=\"http://xmpp.org/extensions/xep-0320.html\" target=\"_blank\" rel=\"external\">XEP-0320: Use of DTLS-SRTP in Jingle Sessions</a> for creating the appropriate Stanza. We are also dependent on XEPs <a href=\"http://xmpp.org/extensions/xep-0167.html\" target=\"_blank\" rel=\"external\">0167</a>, <a href=\"http://xmpp.org/extensions/xep-0293.html#sdp-mapping\" target=\"_blank\" rel=\"external\">0293</a> and <a href=\"http://xmpp.org/extensions/xep-0294.html#sdp-mapping\" target=\"_blank\" rel=\"external\">0294</a>. It needs a separate blogpost to explain about how the mapping was done as the information though available is sparse. I’ll write one in the next post.</li>\n<li>Then we added a /call command for XMPP account which sends an IQ stanza to the receiver. We had an XML Stanza prototype we need to generate. So we created a sdp2xml() function which parses the plaintext offer and generates a suitable XML stanza for each offer it receives. It is a confusing part because different machines generates different offer depending on the media type present, so creating an equivalent stanza is tricky.</li>\n<li>In the meantime I got confused between using a <a href=\"http://xmpp.org/extensions/inbox/jingle-sdp.html\" target=\"_blank\" rel=\"external\">Draft XEP: Jingle SDP Content</a> and XEP: 0320 and badly messed things up. We finally made a good decision on going with the standard 0320.</li>\n<li>The next part was to test the function developed. An xpcshell-test has been written for the sdp2xml().</li>\n</ol>\n<p>The next task is to create a real SDP call offer whenever caller makes a call request —&gt; covert it to IQ Stanza. For this we have decided to add a call button (generalized way of adding it is already developed) , create an interface between the UI and the XMPP backend which passes the offer as an argument to the sdp2xml() and then send the stanza. :)</p>\n","excerpt":"","more":"<p>To send a message from one client to the other we need a signaling channel which provides a path for data transfer over the network. While working with WebRTC PeerConnection API for a web app no one worries about the channel since the SDP (Session Description Protocol) “offer” and “answer” is sent over a plaintext channel. But to implement RTCPeerConnection API for an XMPP account we need to send the message in the form of XML stanza through the Jingle channel. So the caller has to first convert the SDP offer into an XML stanza, send it over Jingle, callee receives the stanza, converts it back to original SDP offer and then repeat the same for his answer to the request.</p>\n<p>Here is how we broke this up and made it the Jingle way.</p>\n<ol>\n<li>The first step was to get the plaintext <a href=\"http://tools.ietf.org/html/rfc4566.html#section-1\">SDP offer</a> and understand what each line and of it means, then create a suitable XML IQ Stanza for the same. We then finalized on using the <a href=\"http://xmpp.org/extensions/xep-0320.html\">XEP-0320: Use of DTLS-SRTP in Jingle Sessions</a> for creating the appropriate Stanza. We are also dependent on XEPs <a href=\"http://xmpp.org/extensions/xep-0167.html\">0167</a>, <a href=\"http://xmpp.org/extensions/xep-0293.html#sdp-mapping\">0293</a> and <a href=\"http://xmpp.org/extensions/xep-0294.html#sdp-mapping\">0294</a>. It needs a separate blogpost to explain about how the mapping was done as the information though available is sparse. I’ll write one in the next post.</li>\n<li>Then we added a /call command for XMPP account which sends an IQ stanza to the receiver. We had an XML Stanza prototype we need to generate. So we created a sdp2xml() function which parses the plaintext offer and generates a suitable XML stanza for each offer it receives. It is a confusing part because different machines generates different offer depending on the media type present, so creating an equivalent stanza is tricky.</li>\n<li>In the meantime I got confused between using a <a href=\"http://xmpp.org/extensions/inbox/jingle-sdp.html\">Draft XEP: Jingle SDP Content</a> and XEP: 0320 and badly messed things up. We finally made a good decision on going with the standard 0320.</li>\n<li>The next part was to test the function developed. An xpcshell-test has been written for the sdp2xml().</li>\n</ol>\n<p>The next task is to create a real SDP call offer whenever caller makes a call request —&gt; covert it to IQ Stanza. For this we have decided to add a call button (generalized way of adding it is already developed) , create an interface between the UI and the XMPP backend which passes the offer as an argument to the sdp2xml() and then send the stanza. :)</p>\n"},{"title":"and...First XMPP Video Call Was Made","date":"2014-06-16T11:46:18.000Z","foreword":"Until last week there used to be a harcoded offer and we converted this offer to XML Stanza and then retrieve it back. Moving forward we added the WebRTC methods in the conversation.xml binding which would generate the SDP offer in the DOMWindow.","_content":"Until last week there used to be a harcoded offer and we converted this offer to XML Stanza and then retrieve it back. Moving forward we added the WebRTC methods in the conversation.xml binding which would generate the SDP offer in the DOMWindow. But the problem was, “How will the generated offer reach the prpl?”. The solution was simple but not straight forward, I had to create a method in the interface `prplIConvIM` so that the method becomes available at the `xmpp.jsm` too. I followed the standard approach as directed i.e. added a method startCall() in the <conde>prplIConv</conde> interface, set default at `jsProtoHelper.jsm` and then defined also at `prplIConvIM` since it was the interface the startCall method in converation binding was going to use. I was able to generate the offer and the client was able to receive and convert the same.\n\nThe startCall method in the conversation binding looked like this\n\n`\n    <body>\n    <![CDATA[\n      let conv = this._conv;\n      let fail = function(err) {\n        conv.systemMessage(err);\n      };\n      let pc = this.initPeerConnection();\n      this.getVideo(function() {\n        pc.createOffer(function(offer) {\n          pc.setLocalDescription(offer, function() {\n            conv.startCall(offer.sdp);\n          }, fail);\n        }, fail);\n      }, fail);\n    ]]>\n    </body>\n`\n\nThe initPeerConnection method adds the UI for “localVideo” and “remoteVideo”, creates a `mozRTCPeerconenction` object and adds stream. getVideo method is used for adding playback stream to localVideo and the `createOffer` is used to generate the SDP offer. We send the SDP part of the generated offer to prpl using startCall() for conversion to XML Stanza.\n\nUsing `notifyObservers()` the offer received and converted at the callee’s end is sent to the converastion binding and this offer is then used to generate answer.\n\nNow I had to repeat the same procedure i.e. use the received SDP offer to create an answer and then again send it to the caller to establish the call. I followed and added createAnswer() which sends the SDP part of the answer to the prpl which then converts it to XML Stanza and send it to caller…and so on.\n\nWhen all the above steps is completed and the caller accepts the answer (auto accepting presently), webrtcAnswerCall method is called and the call session is established between the two users. i.e. the video is transmitted! :) You can follow up the whole procedure at the [Bug 1018060: Voice and video call support in XMPP using WebRTC](https://bugzilla.mozilla.org/show_bug.cgi?id=1018060)\n\nNext in the priority series is to add call disconnect feature, improve the UI as per the [prototype](http://i.imgur.com/UcxFIju.png) and add the ability to start a new conversation when making a video call.","source":"_posts/and-first-xmpp-video-call-was-made.md","raw":"---\ntitle: and...First XMPP Video Call Was Made\ndate: 2014-06-16 17:16:18\nforeword: Until last week there used to be a harcoded offer and we converted this offer to XML Stanza and then retrieve it back. Moving forward we added the WebRTC methods in the conversation.xml binding which would generate the SDP offer in the DOMWindow.\n---\nUntil last week there used to be a harcoded offer and we converted this offer to XML Stanza and then retrieve it back. Moving forward we added the WebRTC methods in the conversation.xml binding which would generate the SDP offer in the DOMWindow. But the problem was, “How will the generated offer reach the prpl?”. The solution was simple but not straight forward, I had to create a method in the interface `prplIConvIM` so that the method becomes available at the `xmpp.jsm` too. I followed the standard approach as directed i.e. added a method startCall() in the <conde>prplIConv</conde> interface, set default at `jsProtoHelper.jsm` and then defined also at `prplIConvIM` since it was the interface the startCall method in converation binding was going to use. I was able to generate the offer and the client was able to receive and convert the same.\n\nThe startCall method in the conversation binding looked like this\n\n`\n    <body>\n    <![CDATA[\n      let conv = this._conv;\n      let fail = function(err) {\n        conv.systemMessage(err);\n      };\n      let pc = this.initPeerConnection();\n      this.getVideo(function() {\n        pc.createOffer(function(offer) {\n          pc.setLocalDescription(offer, function() {\n            conv.startCall(offer.sdp);\n          }, fail);\n        }, fail);\n      }, fail);\n    ]]>\n    </body>\n`\n\nThe initPeerConnection method adds the UI for “localVideo” and “remoteVideo”, creates a `mozRTCPeerconenction` object and adds stream. getVideo method is used for adding playback stream to localVideo and the `createOffer` is used to generate the SDP offer. We send the SDP part of the generated offer to prpl using startCall() for conversion to XML Stanza.\n\nUsing `notifyObservers()` the offer received and converted at the callee’s end is sent to the converastion binding and this offer is then used to generate answer.\n\nNow I had to repeat the same procedure i.e. use the received SDP offer to create an answer and then again send it to the caller to establish the call. I followed and added createAnswer() which sends the SDP part of the answer to the prpl which then converts it to XML Stanza and send it to caller…and so on.\n\nWhen all the above steps is completed and the caller accepts the answer (auto accepting presently), webrtcAnswerCall method is called and the call session is established between the two users. i.e. the video is transmitted! :) You can follow up the whole procedure at the [Bug 1018060: Voice and video call support in XMPP using WebRTC](https://bugzilla.mozilla.org/show_bug.cgi?id=1018060)\n\nNext in the priority series is to add call disconnect feature, improve the UI as per the [prototype](http://i.imgur.com/UcxFIju.png) and add the ability to start a new conversation when making a video call.","slug":"and-first-xmpp-video-call-was-made","published":1,"updated":"2016-08-05T13:14:05.000Z","_id":"cirhqc9ng0005kyv5b9ynmv37","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Until last week there used to be a harcoded offer and we converted this offer to XML Stanza and then retrieve it back. Moving forward we added the WebRTC methods in the conversation.xml binding which would generate the SDP offer in the DOMWindow. But the problem was, “How will the generated offer reach the prpl?”. The solution was simple but not straight forward, I had to create a method in the interface <code>prplIConvIM</code> so that the method becomes available at the <code>xmpp.jsm</code> too. I followed the standard approach as directed i.e. added a method startCall() in the <conde>prplIConv</conde> interface, set default at <code>jsProtoHelper.jsm</code> and then defined also at <code>prplIConvIM</code> since it was the interface the startCall method in converation binding was going to use. I was able to generate the offer and the client was able to receive and convert the same.</p>\n<p>The startCall method in the conversation binding looked like this</p>\n<p><code>&lt;body&gt;\n    &lt;![CDATA[\n      let conv = this._conv;\n      let fail = function(err) {\n        conv.systemMessage(err);\n      };\n      let pc = this.initPeerConnection();\n      this.getVideo(function() {\n        pc.createOffer(function(offer) {\n          pc.setLocalDescription(offer, function() {\n            conv.startCall(offer.sdp);\n          }, fail);\n        }, fail);\n      }, fail);\n    ]]&gt;\n    &lt;/body&gt;</code></p>\n<p>The initPeerConnection method adds the UI for “localVideo” and “remoteVideo”, creates a <code>mozRTCPeerconenction</code> object and adds stream. getVideo method is used for adding playback stream to localVideo and the <code>createOffer</code> is used to generate the SDP offer. We send the SDP part of the generated offer to prpl using startCall() for conversion to XML Stanza.</p>\n<p>Using <code>notifyObservers()</code> the offer received and converted at the callee’s end is sent to the converastion binding and this offer is then used to generate answer.</p>\n<p>Now I had to repeat the same procedure i.e. use the received SDP offer to create an answer and then again send it to the caller to establish the call. I followed and added createAnswer() which sends the SDP part of the answer to the prpl which then converts it to XML Stanza and send it to caller…and so on.</p>\n<p>When all the above steps is completed and the caller accepts the answer (auto accepting presently), webrtcAnswerCall method is called and the call session is established between the two users. i.e. the video is transmitted! :) You can follow up the whole procedure at the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1018060\" target=\"_blank\" rel=\"external\">Bug 1018060: Voice and video call support in XMPP using WebRTC</a></p>\n<p>Next in the priority series is to add call disconnect feature, improve the UI as per the <a href=\"http://i.imgur.com/UcxFIju.png\" target=\"_blank\" rel=\"external\">prototype</a> and add the ability to start a new conversation when making a video call.</p>\n","excerpt":"","more":"<p>Until last week there used to be a harcoded offer and we converted this offer to XML Stanza and then retrieve it back. Moving forward we added the WebRTC methods in the conversation.xml binding which would generate the SDP offer in the DOMWindow. But the problem was, “How will the generated offer reach the prpl?”. The solution was simple but not straight forward, I had to create a method in the interface <code>prplIConvIM</code> so that the method becomes available at the <code>xmpp.jsm</code> too. I followed the standard approach as directed i.e. added a method startCall() in the <conde>prplIConv</conde> interface, set default at <code>jsProtoHelper.jsm</code> and then defined also at <code>prplIConvIM</code> since it was the interface the startCall method in converation binding was going to use. I was able to generate the offer and the client was able to receive and convert the same.</p>\n<p>The startCall method in the conversation binding looked like this</p>\n<p><code>&lt;body&gt;\n    &lt;![CDATA[\n      let conv = this._conv;\n      let fail = function(err) {\n        conv.systemMessage(err);\n      };\n      let pc = this.initPeerConnection();\n      this.getVideo(function() {\n        pc.createOffer(function(offer) {\n          pc.setLocalDescription(offer, function() {\n            conv.startCall(offer.sdp);\n          }, fail);\n        }, fail);\n      }, fail);\n    ]]&gt;\n    &lt;/body&gt;</code></p>\n<p>The initPeerConnection method adds the UI for “localVideo” and “remoteVideo”, creates a <code>mozRTCPeerconenction</code> object and adds stream. getVideo method is used for adding playback stream to localVideo and the <code>createOffer</code> is used to generate the SDP offer. We send the SDP part of the generated offer to prpl using startCall() for conversion to XML Stanza.</p>\n<p>Using <code>notifyObservers()</code> the offer received and converted at the callee’s end is sent to the converastion binding and this offer is then used to generate answer.</p>\n<p>Now I had to repeat the same procedure i.e. use the received SDP offer to create an answer and then again send it to the caller to establish the call. I followed and added createAnswer() which sends the SDP part of the answer to the prpl which then converts it to XML Stanza and send it to caller…and so on.</p>\n<p>When all the above steps is completed and the caller accepts the answer (auto accepting presently), webrtcAnswerCall method is called and the call session is established between the two users. i.e. the video is transmitted! :) You can follow up the whole procedure at the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1018060\">Bug 1018060: Voice and video call support in XMPP using WebRTC</a></p>\n<p>Next in the priority series is to add call disconnect feature, improve the UI as per the <a href=\"http://i.imgur.com/UcxFIju.png\">prototype</a> and add the ability to start a new conversation when making a video call.</p>\n"},{"title":"GSoC Report - Reaching the Midterm","date":"2014-06-25T11:46:18.000Z","foreword":"Proceeding further the next priority task was to first add a “call disconnect” support to the video call and then it was to remove the auto connecting calls and instead send the notification to the callee whether to Accept/Reject the call.","_content":"Proceeding further the next priority task was to first add a “call disconnect” support to the video call and then it was to remove the auto connecting calls and instead send the notification to the callee whether to Accept/Reject the call.\n\n*   For adding the call disconnect support I created a “endCall” menthod in the conversation binding which restores the UI to the normal chat convresation state, stops the ongoing peerconnection and then calls the “endcall()” of the prpl to send the “session-terminate” IQ stanza to the callee. When the callee receives a session-terminate stanza it also does the same excluding the sending the stanza part.\n*   Now to send call notification I used `notificationbox` which popups a notification bar to the callee with an “accept” and “reject” button.\n*   I spent a day improving the UI of the call and using CSS’s `calc()` to dynamically vary the size instead of using the resizeVideo method I defined earlier, added a close call button and an ongoing call state to the video call button.\n*   In the meantime :aleth suggested to add a countdown call timer which would disconnect the call automatically on both ends if unanswered for 30 sec. I implemented that too using `setTimeout` and `clearTimeout` functions.\n\nThe next milestone is to get the patch ready and also land the generic buttons patch. We are also suppose to add Entity discovery which would enable Video/Voice call iff the compatible device is detected.\n\nKeeping XMPP Call project aside I worked on the bug to build a generic way to add icons to the toolbar. Plus the best part of this week was that I met Saurabh and Nihanth who are also the other GSoCers @ Instantbird.","source":"_posts/gsoc-report-reaching-the-midterm.md","raw":"---\ntitle: GSoC Report - Reaching the Midterm\ndate: 2014-06-25 17:16:18\nforeword: Proceeding further the next priority task was to first add a “call disconnect” support to the video call and then it was to remove the auto connecting calls and instead send the notification to the callee whether to Accept/Reject the call.\n---\nProceeding further the next priority task was to first add a “call disconnect” support to the video call and then it was to remove the auto connecting calls and instead send the notification to the callee whether to Accept/Reject the call.\n\n*   For adding the call disconnect support I created a “endCall” menthod in the conversation binding which restores the UI to the normal chat convresation state, stops the ongoing peerconnection and then calls the “endcall()” of the prpl to send the “session-terminate” IQ stanza to the callee. When the callee receives a session-terminate stanza it also does the same excluding the sending the stanza part.\n*   Now to send call notification I used `notificationbox` which popups a notification bar to the callee with an “accept” and “reject” button.\n*   I spent a day improving the UI of the call and using CSS’s `calc()` to dynamically vary the size instead of using the resizeVideo method I defined earlier, added a close call button and an ongoing call state to the video call button.\n*   In the meantime :aleth suggested to add a countdown call timer which would disconnect the call automatically on both ends if unanswered for 30 sec. I implemented that too using `setTimeout` and `clearTimeout` functions.\n\nThe next milestone is to get the patch ready and also land the generic buttons patch. We are also suppose to add Entity discovery which would enable Video/Voice call iff the compatible device is detected.\n\nKeeping XMPP Call project aside I worked on the bug to build a generic way to add icons to the toolbar. Plus the best part of this week was that I met Saurabh and Nihanth who are also the other GSoCers @ Instantbird.","slug":"gsoc-report-reaching-the-midterm","published":1,"updated":"2016-08-05T13:14:59.000Z","_id":"cirhqndza0000uyv5gy30d1tg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Proceeding further the next priority task was to first add a “call disconnect” support to the video call and then it was to remove the auto connecting calls and instead send the notification to the callee whether to Accept/Reject the call.</p>\n<ul>\n<li>For adding the call disconnect support I created a “endCall” menthod in the conversation binding which restores the UI to the normal chat convresation state, stops the ongoing peerconnection and then calls the “endcall()” of the prpl to send the “session-terminate” IQ stanza to the callee. When the callee receives a session-terminate stanza it also does the same excluding the sending the stanza part.</li>\n<li>Now to send call notification I used <code>notificationbox</code> which popups a notification bar to the callee with an “accept” and “reject” button.</li>\n<li>I spent a day improving the UI of the call and using CSS’s <code>calc()</code> to dynamically vary the size instead of using the resizeVideo method I defined earlier, added a close call button and an ongoing call state to the video call button.</li>\n<li>In the meantime :aleth suggested to add a countdown call timer which would disconnect the call automatically on both ends if unanswered for 30 sec. I implemented that too using <code>setTimeout</code> and <code>clearTimeout</code> functions.</li>\n</ul>\n<p>The next milestone is to get the patch ready and also land the generic buttons patch. We are also suppose to add Entity discovery which would enable Video/Voice call iff the compatible device is detected.</p>\n<p>Keeping XMPP Call project aside I worked on the bug to build a generic way to add icons to the toolbar. Plus the best part of this week was that I met Saurabh and Nihanth who are also the other GSoCers @ Instantbird.</p>\n","excerpt":"","more":"<p>Proceeding further the next priority task was to first add a “call disconnect” support to the video call and then it was to remove the auto connecting calls and instead send the notification to the callee whether to Accept/Reject the call.</p>\n<ul>\n<li>For adding the call disconnect support I created a “endCall” menthod in the conversation binding which restores the UI to the normal chat convresation state, stops the ongoing peerconnection and then calls the “endcall()” of the prpl to send the “session-terminate” IQ stanza to the callee. When the callee receives a session-terminate stanza it also does the same excluding the sending the stanza part.</li>\n<li>Now to send call notification I used <code>notificationbox</code> which popups a notification bar to the callee with an “accept” and “reject” button.</li>\n<li>I spent a day improving the UI of the call and using CSS’s <code>calc()</code> to dynamically vary the size instead of using the resizeVideo method I defined earlier, added a close call button and an ongoing call state to the video call button.</li>\n<li>In the meantime :aleth suggested to add a countdown call timer which would disconnect the call automatically on both ends if unanswered for 30 sec. I implemented that too using <code>setTimeout</code> and <code>clearTimeout</code> functions.</li>\n</ul>\n<p>The next milestone is to get the patch ready and also land the generic buttons patch. We are also suppose to add Entity discovery which would enable Video/Voice call iff the compatible device is detected.</p>\n<p>Keeping XMPP Call project aside I worked on the bug to build a generic way to add icons to the toolbar. Plus the best part of this week was that I met Saurabh and Nihanth who are also the other GSoCers @ Instantbird.</p>\n"},{"title":"Implementing Entitiy Discovery - Part 1","date":"2014-07-08T11:46:18.000Z","foreword":"Entity Discovery helps you figure out the device supported at both the ends of the conversation even before the service has been called for action so that the user knows about the capability of the service.","_content":"I would be coding the rest of my summers from college.\n\nThe implementation of <a href=\"\">XEP-1115: Entity Discovery</a> is going to be a major milestone for two of the Instantbird GSoC projects (<a>File Transfer using XMPP</a> and <a>Video/Voice Call using XMPP</a>).\n\nIn layman terms Entity Discovery helps you figure out the device supported at both the ends of the conversation even before the service has been called for action so that the user knows about the capability of the service. To understand further let us take an example of the most popular Hangouts. Sign in to Google Hangouts with a webcam enabled machine and then you’ll see a video call button during the conversation. Now disable your webcam and you’ll figure out that the button has now disappeared. How does the computer at the other end knows that the service is no longer supported? Simple, the user sends the new entity information to other users and they now know about its supported service list.\n\nNow my task is to implement this feature for XMPP protocol which uses XML Stanzas for the conversation. As you must have seen in the example above it can be divided into two parts\n\n1. Send an Entity Discovery stanza\n2. Receive and decode an Entity Discovery stanza\n\nSimple as it sounds, what we did was we broke it bottom-up and started from the second step. When we connected a buddy using a chat client Jitsi which already has video call support for XMPP we received a `c` node containg the SHA-1 encrypted, Base 64 encoded `ver` attribute. This attribute is unique for a list of entities. Thus we needed to recreate such a stanza for implementing voice call entity discovery. The steps to create a “ver” attribute has been defined here [](http://xmpp.org/extensions/xep-0115.html#ver-proc)[http://xmpp.org/extensions/xep-0115.html#ver-proc](http://xmpp.org/extensions/xep-0115.html#ver-proc). A little complex as I got confused with the steps mentioned. ;)\n\n#### READ ALERT: Why we are not using XEP-0030: Service Discovery?\n\nThe [XEP-0030](http://xmpp.org/extensions/xep-0030.html) is now obsolute since it floods the conversation with service discovery stanzas for each user. There might be a condition that two users are sharing same service discovery information. Instead of sending and receving things repeatedly we save the entity information with the ver attribute received and use it for later comparisions. This saves bandwidth and is less time consuming.\n\nWe request a service discovery info only if we don’t have a similar ver attribute received before for an Instantbird session. On receive of the Query Stanza of type result containing the `identity` and `feature` child nodes we try to reconstruct the ver attribute as mentioned above. Upon successful regeneration we now know the entities mapped with the hashed string.\n\nSend this entity information to the conversation binding by using an integer as a register and then creating an JS object from the same containing the entity list. The user will map his own capabilities to that of client’s and enable the support of only those services for whom intersection of flags is true for both the ends.\n\nMy next task is to implement the Entity Discovery Creation part which would be easy as most of the parts has been already covered.","source":"_posts/implementing-entitiy-discovery-part-1.md","raw":"---\ntitle: Implementing Entitiy Discovery - Part 1\ndate: 2014-07-8 17:16:18\nforeword: Entity Discovery helps you figure out the device supported at both the ends of the conversation even before the service has been called for action so that the user knows about the capability of the service.\n---\nI would be coding the rest of my summers from college.\n\nThe implementation of <a href=\"\">XEP-1115: Entity Discovery</a> is going to be a major milestone for two of the Instantbird GSoC projects (<a>File Transfer using XMPP</a> and <a>Video/Voice Call using XMPP</a>).\n\nIn layman terms Entity Discovery helps you figure out the device supported at both the ends of the conversation even before the service has been called for action so that the user knows about the capability of the service. To understand further let us take an example of the most popular Hangouts. Sign in to Google Hangouts with a webcam enabled machine and then you’ll see a video call button during the conversation. Now disable your webcam and you’ll figure out that the button has now disappeared. How does the computer at the other end knows that the service is no longer supported? Simple, the user sends the new entity information to other users and they now know about its supported service list.\n\nNow my task is to implement this feature for XMPP protocol which uses XML Stanzas for the conversation. As you must have seen in the example above it can be divided into two parts\n\n1. Send an Entity Discovery stanza\n2. Receive and decode an Entity Discovery stanza\n\nSimple as it sounds, what we did was we broke it bottom-up and started from the second step. When we connected a buddy using a chat client Jitsi which already has video call support for XMPP we received a `c` node containg the SHA-1 encrypted, Base 64 encoded `ver` attribute. This attribute is unique for a list of entities. Thus we needed to recreate such a stanza for implementing voice call entity discovery. The steps to create a “ver” attribute has been defined here [](http://xmpp.org/extensions/xep-0115.html#ver-proc)[http://xmpp.org/extensions/xep-0115.html#ver-proc](http://xmpp.org/extensions/xep-0115.html#ver-proc). A little complex as I got confused with the steps mentioned. ;)\n\n#### READ ALERT: Why we are not using XEP-0030: Service Discovery?\n\nThe [XEP-0030](http://xmpp.org/extensions/xep-0030.html) is now obsolute since it floods the conversation with service discovery stanzas for each user. There might be a condition that two users are sharing same service discovery information. Instead of sending and receving things repeatedly we save the entity information with the ver attribute received and use it for later comparisions. This saves bandwidth and is less time consuming.\n\nWe request a service discovery info only if we don’t have a similar ver attribute received before for an Instantbird session. On receive of the Query Stanza of type result containing the `identity` and `feature` child nodes we try to reconstruct the ver attribute as mentioned above. Upon successful regeneration we now know the entities mapped with the hashed string.\n\nSend this entity information to the conversation binding by using an integer as a register and then creating an JS object from the same containing the entity list. The user will map his own capabilities to that of client’s and enable the support of only those services for whom intersection of flags is true for both the ends.\n\nMy next task is to implement the Entity Discovery Creation part which would be easy as most of the parts has been already covered.","slug":"implementing-entitiy-discovery-part-1","published":1,"updated":"2016-08-05T13:15:52.000Z","_id":"cirhqu5bd0001uyv5yael3qgy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I would be coding the rest of my summers from college.</p>\n<p>The implementation of <a href=\"\">XEP-1115: Entity Discovery</a> is going to be a major milestone for two of the Instantbird GSoC projects (<a>File Transfer using XMPP</a> and <a>Video/Voice Call using XMPP</a>).</p>\n<p>In layman terms Entity Discovery helps you figure out the device supported at both the ends of the conversation even before the service has been called for action so that the user knows about the capability of the service. To understand further let us take an example of the most popular Hangouts. Sign in to Google Hangouts with a webcam enabled machine and then you’ll see a video call button during the conversation. Now disable your webcam and you’ll figure out that the button has now disappeared. How does the computer at the other end knows that the service is no longer supported? Simple, the user sends the new entity information to other users and they now know about its supported service list.</p>\n<p>Now my task is to implement this feature for XMPP protocol which uses XML Stanzas for the conversation. As you must have seen in the example above it can be divided into two parts</p>\n<ol>\n<li>Send an Entity Discovery stanza</li>\n<li>Receive and decode an Entity Discovery stanza</li>\n</ol>\n<p>Simple as it sounds, what we did was we broke it bottom-up and started from the second step. When we connected a buddy using a chat client Jitsi which already has video call support for XMPP we received a <code>c</code> node containg the SHA-1 encrypted, Base 64 encoded <code>ver</code> attribute. This attribute is unique for a list of entities. Thus we needed to recreate such a stanza for implementing voice call entity discovery. The steps to create a “ver” attribute has been defined here <a href=\"http://xmpp.org/extensions/xep-0115.html#ver-proc\" target=\"_blank\" rel=\"external\"></a><a href=\"http://xmpp.org/extensions/xep-0115.html#ver-proc\" target=\"_blank\" rel=\"external\">http://xmpp.org/extensions/xep-0115.html#ver-proc</a>. A little complex as I got confused with the steps mentioned. ;)</p>\n<h4 id=\"READ-ALERT-Why-we-are-not-using-XEP-0030-Service-Discovery\"><a href=\"#READ-ALERT-Why-we-are-not-using-XEP-0030-Service-Discovery\" class=\"headerlink\" title=\"READ ALERT: Why we are not using XEP-0030: Service Discovery?\"></a>READ ALERT: Why we are not using XEP-0030: Service Discovery?</h4><p>The <a href=\"http://xmpp.org/extensions/xep-0030.html\" target=\"_blank\" rel=\"external\">XEP-0030</a> is now obsolute since it floods the conversation with service discovery stanzas for each user. There might be a condition that two users are sharing same service discovery information. Instead of sending and receving things repeatedly we save the entity information with the ver attribute received and use it for later comparisions. This saves bandwidth and is less time consuming.</p>\n<p>We request a service discovery info only if we don’t have a similar ver attribute received before for an Instantbird session. On receive of the Query Stanza of type result containing the <code>identity</code> and <code>feature</code> child nodes we try to reconstruct the ver attribute as mentioned above. Upon successful regeneration we now know the entities mapped with the hashed string.</p>\n<p>Send this entity information to the conversation binding by using an integer as a register and then creating an JS object from the same containing the entity list. The user will map his own capabilities to that of client’s and enable the support of only those services for whom intersection of flags is true for both the ends.</p>\n<p>My next task is to implement the Entity Discovery Creation part which would be easy as most of the parts has been already covered.</p>\n","excerpt":"","more":"<p>I would be coding the rest of my summers from college.</p>\n<p>The implementation of <a href=\"\">XEP-1115: Entity Discovery</a> is going to be a major milestone for two of the Instantbird GSoC projects (<a>File Transfer using XMPP</a> and <a>Video/Voice Call using XMPP</a>).</p>\n<p>In layman terms Entity Discovery helps you figure out the device supported at both the ends of the conversation even before the service has been called for action so that the user knows about the capability of the service. To understand further let us take an example of the most popular Hangouts. Sign in to Google Hangouts with a webcam enabled machine and then you’ll see a video call button during the conversation. Now disable your webcam and you’ll figure out that the button has now disappeared. How does the computer at the other end knows that the service is no longer supported? Simple, the user sends the new entity information to other users and they now know about its supported service list.</p>\n<p>Now my task is to implement this feature for XMPP protocol which uses XML Stanzas for the conversation. As you must have seen in the example above it can be divided into two parts</p>\n<ol>\n<li>Send an Entity Discovery stanza</li>\n<li>Receive and decode an Entity Discovery stanza</li>\n</ol>\n<p>Simple as it sounds, what we did was we broke it bottom-up and started from the second step. When we connected a buddy using a chat client Jitsi which already has video call support for XMPP we received a <code>c</code> node containg the SHA-1 encrypted, Base 64 encoded <code>ver</code> attribute. This attribute is unique for a list of entities. Thus we needed to recreate such a stanza for implementing voice call entity discovery. The steps to create a “ver” attribute has been defined here <a href=\"http://xmpp.org/extensions/xep-0115.html#ver-proc\"></a><a href=\"http://xmpp.org/extensions/xep-0115.html#ver-proc\">http://xmpp.org/extensions/xep-0115.html#ver-proc</a>. A little complex as I got confused with the steps mentioned. ;)</p>\n<h4 id=\"READ-ALERT-Why-we-are-not-using-XEP-0030-Service-Discovery\"><a href=\"#READ-ALERT-Why-we-are-not-using-XEP-0030-Service-Discovery\" class=\"headerlink\" title=\"READ ALERT: Why we are not using XEP-0030: Service Discovery?\"></a>READ ALERT: Why we are not using XEP-0030: Service Discovery?</h4><p>The <a href=\"http://xmpp.org/extensions/xep-0030.html\">XEP-0030</a> is now obsolute since it floods the conversation with service discovery stanzas for each user. There might be a condition that two users are sharing same service discovery information. Instead of sending and receving things repeatedly we save the entity information with the ver attribute received and use it for later comparisions. This saves bandwidth and is less time consuming.</p>\n<p>We request a service discovery info only if we don’t have a similar ver attribute received before for an Instantbird session. On receive of the Query Stanza of type result containing the <code>identity</code> and <code>feature</code> child nodes we try to reconstruct the ver attribute as mentioned above. Upon successful regeneration we now know the entities mapped with the hashed string.</p>\n<p>Send this entity information to the conversation binding by using an integer as a register and then creating an JS object from the same containing the entity list. The user will map his own capabilities to that of client’s and enable the support of only those services for whom intersection of flags is true for both the ends.</p>\n<p>My next task is to implement the Entity Discovery Creation part which would be easy as most of the parts has been already covered.</p>\n"},{"title":"Implementing Entitiy Discovery - Part 2","date":"2014-07-15T11:46:18.000Z","foreword":"Finally entity capability implementation for XMPP is complete and is ready for review cycles. We have added the video discovery capability.","_content":"Finally entity capability implementation for XMPP is complete and is ready for review cycles. We have added the video discovery capability. As discussed in [Part 1](http://mayanktg.github.io/implementing-entitiy-discovery-part-1/) after adding the receive capability and decoding it now we move forward for the sending part.\n\nWe need to send a `c` node along with the `presence` stanza to the user. We create a presence stanza like:\n{% codeblock Presence stanza lang:xml %}\n<presence xmlns=\"jabber:client\" id=\"6\" xml:lang=\"en\" from=\"xyz@abc.com/Instantbird\">\n <show xmlns=\"jabber:client\">\n  away\n </show>\n <status xmlns=\"jabber:client\">\n  I am currently away from the computer.\n </status>\n <c xmlns=\"http://jabber.org/protocol/caps\" ver=\"5guaTqssTb94FuNI4uMKvCOspHE=\" hash=\"sha-1\" node=\"http://instantbird.com\"/>\n</presence>\n{% endcodeblock %}\nOn receiving this stanza the machine performs the check as previously discussed in last post and if needed sends a service discovery request stanza.\n{% codeblock service discovery request stanza lang:xml %}\n<iq type=\"get\" id=\"id-ig57r\" to=\"xyz@abc.com/Instantbird\">\n  <query xmlns=\"http://jabber.org/protocol/disco#info\" node=\"http://instantbird.com#5guaTqssTb94FuNI4uMKvCOspHE=\"/>\n</iq>\n{% endcodeblock %}\nNow when a client receives this stanza it has to generate its own service capability stanza and send this to the user as a IQ result. Currently we use a `generateServiceDiscovery()` :\n{% codeblock Service capability function lang:javascript %}\ngenerateServiceDiscovery: function() {\n  let queryStanza = Stanza.node(\"query\", null, {xmlns: \"http://jabber.org/protocol/disco#info\",\n                                                node: \"http://instantbird.com\"});\n  queryStanza.addChild(Stanza.node(\"identity\", null, {type: \"pc\",\n                                                      name: \"Instantbird\",\n                                                      category: \"client\"}));\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"urn:xmpp:jingle:apps:rtp:video\"}));\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"urn:xmpp:jingle:apps:rtp:audio\"}));\n\n  // Added to maintain interportability with other clients.\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"http://www.google.com/xmpp/protocol/voice/v1\"}));\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"http://www.google.com/xmpp/protocol/video/v1\"}));\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"http://www.google.com/xmpp/protocol/camera/v1\"}));\n\n  return queryStanza;\n}\n{% endcodeblock %}\nNow one of the prime task is to be able to actually detect our own video/audio devices and perform the video call only if the device is capable. For this we have used a callback method detectVideocapability() which detects the audio and video devices using `mozGetUserMediaDevices` and proceeds for the call only if the media devices are present.\n{% codeblock Media device discovery lang:xml %}\n<method name=\"detectVideoCapability\">\n  <parameter name=\"aSuccessCallback\"/>\n  <parameter name=\"aErrorCallback\"/>\n  <body>\n  <![CDATA[\n      navigator.mozGetUserMedia({audio: false, video: false},\n                                function() {}, function() {});\n\n      navigator.mozGetUserMediaDevices({video: true, audio: true},\n                                       aSuccessCallback,\n                                       aErrorCallback);\n  ]]>\n  </body>\n</method>\n{% endcodeblock %}\nThe WIP for the entity capability implementation can be tracked at [Bug 1025150](https://bugzilla.mozilla.org/show_bug.cgi?id=1025150).","source":"_posts/implementing-entitiy-discovery-part-2.md","raw":"---\ntitle: Implementing Entitiy Discovery - Part 2\ndate: 2014-07-15 17:16:18\nforeword: Finally entity capability implementation for XMPP is complete and is ready for review cycles. We have added the video discovery capability.\n---\nFinally entity capability implementation for XMPP is complete and is ready for review cycles. We have added the video discovery capability. As discussed in [Part 1](http://mayanktg.github.io/implementing-entitiy-discovery-part-1/) after adding the receive capability and decoding it now we move forward for the sending part.\n\nWe need to send a `c` node along with the `presence` stanza to the user. We create a presence stanza like:\n{% codeblock Presence stanza lang:xml %}\n<presence xmlns=\"jabber:client\" id=\"6\" xml:lang=\"en\" from=\"xyz@abc.com/Instantbird\">\n <show xmlns=\"jabber:client\">\n  away\n </show>\n <status xmlns=\"jabber:client\">\n  I am currently away from the computer.\n </status>\n <c xmlns=\"http://jabber.org/protocol/caps\" ver=\"5guaTqssTb94FuNI4uMKvCOspHE=\" hash=\"sha-1\" node=\"http://instantbird.com\"/>\n</presence>\n{% endcodeblock %}\nOn receiving this stanza the machine performs the check as previously discussed in last post and if needed sends a service discovery request stanza.\n{% codeblock service discovery request stanza lang:xml %}\n<iq type=\"get\" id=\"id-ig57r\" to=\"xyz@abc.com/Instantbird\">\n  <query xmlns=\"http://jabber.org/protocol/disco#info\" node=\"http://instantbird.com#5guaTqssTb94FuNI4uMKvCOspHE=\"/>\n</iq>\n{% endcodeblock %}\nNow when a client receives this stanza it has to generate its own service capability stanza and send this to the user as a IQ result. Currently we use a `generateServiceDiscovery()` :\n{% codeblock Service capability function lang:javascript %}\ngenerateServiceDiscovery: function() {\n  let queryStanza = Stanza.node(\"query\", null, {xmlns: \"http://jabber.org/protocol/disco#info\",\n                                                node: \"http://instantbird.com\"});\n  queryStanza.addChild(Stanza.node(\"identity\", null, {type: \"pc\",\n                                                      name: \"Instantbird\",\n                                                      category: \"client\"}));\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"urn:xmpp:jingle:apps:rtp:video\"}));\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"urn:xmpp:jingle:apps:rtp:audio\"}));\n\n  // Added to maintain interportability with other clients.\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"http://www.google.com/xmpp/protocol/voice/v1\"}));\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"http://www.google.com/xmpp/protocol/video/v1\"}));\n  queryStanza.addChild(Stanza.node(\"feature\", null, {var: \"http://www.google.com/xmpp/protocol/camera/v1\"}));\n\n  return queryStanza;\n}\n{% endcodeblock %}\nNow one of the prime task is to be able to actually detect our own video/audio devices and perform the video call only if the device is capable. For this we have used a callback method detectVideocapability() which detects the audio and video devices using `mozGetUserMediaDevices` and proceeds for the call only if the media devices are present.\n{% codeblock Media device discovery lang:xml %}\n<method name=\"detectVideoCapability\">\n  <parameter name=\"aSuccessCallback\"/>\n  <parameter name=\"aErrorCallback\"/>\n  <body>\n  <![CDATA[\n      navigator.mozGetUserMedia({audio: false, video: false},\n                                function() {}, function() {});\n\n      navigator.mozGetUserMediaDevices({video: true, audio: true},\n                                       aSuccessCallback,\n                                       aErrorCallback);\n  ]]>\n  </body>\n</method>\n{% endcodeblock %}\nThe WIP for the entity capability implementation can be tracked at [Bug 1025150](https://bugzilla.mozilla.org/show_bug.cgi?id=1025150).","slug":"implementing-entitiy-discovery-part-2","published":1,"updated":"2016-08-05T13:18:02.000Z","_id":"cirhr6f9l00005dv53efjdkvc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Finally entity capability implementation for XMPP is complete and is ready for review cycles. We have added the video discovery capability. As discussed in <a href=\"http://mayanktg.github.io/implementing-entitiy-discovery-part-1/\">Part 1</a> after adding the receive capability and decoding it now we move forward for the sending part.</p>\n<p>We need to send a <code>c</code> node along with the <code>presence</code> stanza to the user. We create a presence stanza like:<br><figure class=\"highlight xml\"><figcaption><span>Presence stanza</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">presence</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"jabber:client\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"6\"</span> <span class=\"attr\">xml:lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">from</span>=<span class=\"string\">\"xyz@abc.com/Instantbird\"</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">show</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"jabber:client\"</span>&gt;</span></div><div class=\"line\">  away</div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">show</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">status</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"jabber:client\"</span>&gt;</span></div><div class=\"line\">  I am currently away from the computer.</div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">status</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">c</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://jabber.org/protocol/caps\"</span> <span class=\"attr\">ver</span>=<span class=\"string\">\"5guaTqssTb94FuNI4uMKvCOspHE=\"</span> <span class=\"attr\">hash</span>=<span class=\"string\">\"sha-1\"</span> <span class=\"attr\">node</span>=<span class=\"string\">\"http://instantbird.com\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">presence</span>&gt;</span></div></pre></td></tr></table></figure><br>On receiving this stanza the machine performs the check as previously discussed in last post and if needed sends a service discovery request stanza.<br><figure class=\"highlight xml\"><figcaption><span>service discovery request stanza</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iq</span> <span class=\"attr\">type</span>=<span class=\"string\">\"get\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id-ig57r\"</span> <span class=\"attr\">to</span>=<span class=\"string\">\"xyz@abc.com/Instantbird\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">query</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://jabber.org/protocol/disco#info\"</span> <span class=\"attr\">node</span>=<span class=\"string\">\"http://instantbird.com#5guaTqssTb94FuNI4uMKvCOspHE=\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iq</span>&gt;</span></div></pre></td></tr></table></figure><br>Now when a client receives this stanza it has to generate its own service capability stanza and send this to the user as a IQ result. Currently we use a <code>generateServiceDiscovery()</code> :<br><figure class=\"highlight javascript\"><figcaption><span>Service capability function</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">generateServiceDiscovery: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> queryStanza = Stanza.node(<span class=\"string\">\"query\"</span>, <span class=\"literal\">null</span>, &#123;xmlns: <span class=\"string\">\"http://jabber.org/protocol/disco#info\"</span>,</div><div class=\"line\">                                                node: <span class=\"string\">\"http://instantbird.com\"</span>&#125;);</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"identity\"</span>, <span class=\"literal\">null</span>, &#123;type: <span class=\"string\">\"pc\"</span>,</div><div class=\"line\">                                                      name: <span class=\"string\">\"Instantbird\"</span>,</div><div class=\"line\">                                                      category: <span class=\"string\">\"client\"</span>&#125;));</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"urn:xmpp:jingle:apps:rtp:video\"</span>&#125;));</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"urn:xmpp:jingle:apps:rtp:audio\"</span>&#125;));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Added to maintain interportability with other clients.</span></div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"http://www.google.com/xmpp/protocol/voice/v1\"</span>&#125;));</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"http://www.google.com/xmpp/protocol/video/v1\"</span>&#125;));</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"http://www.google.com/xmpp/protocol/camera/v1\"</span>&#125;));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> queryStanza;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>Now one of the prime task is to be able to actually detect our own video/audio devices and perform the video call only if the device is capable. For this we have used a callback method detectVideocapability() which detects the audio and video devices using <code>mozGetUserMediaDevices</code> and proceeds for the call only if the media devices are present.<br><figure class=\"highlight xml\"><figcaption><span>Media device discovery</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"detectVideoCapability\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parameter</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aSuccessCallback\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parameter</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aErrorCallback\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  &lt;![CDATA[</div><div class=\"line\">      navigator.mozGetUserMedia(&#123;audio: false, video: false&#125;,</div><div class=\"line\">                                function() &#123;&#125;, function() &#123;&#125;);</div><div class=\"line\"></div><div class=\"line\">      navigator.mozGetUserMediaDevices(&#123;video: true, audio: true&#125;,</div><div class=\"line\">                                       aSuccessCallback,</div><div class=\"line\">                                       aErrorCallback);</div><div class=\"line\">  ]]&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">method</span>&gt;</span></div></pre></td></tr></table></figure><br>The WIP for the entity capability implementation can be tracked at <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1025150\" target=\"_blank\" rel=\"external\">Bug 1025150</a>.</p>\n","excerpt":"","more":"<p>Finally entity capability implementation for XMPP is complete and is ready for review cycles. We have added the video discovery capability. As discussed in <a href=\"http://mayanktg.github.io/implementing-entitiy-discovery-part-1/\">Part 1</a> after adding the receive capability and decoding it now we move forward for the sending part.</p>\n<p>We need to send a <code>c</code> node along with the <code>presence</code> stanza to the user. We create a presence stanza like:<br><figure class=\"highlight xml\"><figcaption><span>Presence stanza</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">presence</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"jabber:client\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"6\"</span> <span class=\"attr\">xml:lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">from</span>=<span class=\"string\">\"xyz@abc.com/Instantbird\"</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">show</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"jabber:client\"</span>&gt;</span></div><div class=\"line\">  away</div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">show</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">status</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"jabber:client\"</span>&gt;</span></div><div class=\"line\">  I am currently away from the computer.</div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">status</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">c</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://jabber.org/protocol/caps\"</span> <span class=\"attr\">ver</span>=<span class=\"string\">\"5guaTqssTb94FuNI4uMKvCOspHE=\"</span> <span class=\"attr\">hash</span>=<span class=\"string\">\"sha-1\"</span> <span class=\"attr\">node</span>=<span class=\"string\">\"http://instantbird.com\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">presence</span>&gt;</span></div></pre></td></tr></table></figure><br>On receiving this stanza the machine performs the check as previously discussed in last post and if needed sends a service discovery request stanza.<br><figure class=\"highlight xml\"><figcaption><span>service discovery request stanza</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iq</span> <span class=\"attr\">type</span>=<span class=\"string\">\"get\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"id-ig57r\"</span> <span class=\"attr\">to</span>=<span class=\"string\">\"xyz@abc.com/Instantbird\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">query</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://jabber.org/protocol/disco#info\"</span> <span class=\"attr\">node</span>=<span class=\"string\">\"http://instantbird.com#5guaTqssTb94FuNI4uMKvCOspHE=\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iq</span>&gt;</span></div></pre></td></tr></table></figure><br>Now when a client receives this stanza it has to generate its own service capability stanza and send this to the user as a IQ result. Currently we use a <code>generateServiceDiscovery()</code> :<br><figure class=\"highlight javascript\"><figcaption><span>Service capability function</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">generateServiceDiscovery: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> queryStanza = Stanza.node(<span class=\"string\">\"query\"</span>, <span class=\"literal\">null</span>, &#123;xmlns: <span class=\"string\">\"http://jabber.org/protocol/disco#info\"</span>,</div><div class=\"line\">                                                node: <span class=\"string\">\"http://instantbird.com\"</span>&#125;);</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"identity\"</span>, <span class=\"literal\">null</span>, &#123;type: <span class=\"string\">\"pc\"</span>,</div><div class=\"line\">                                                      name: <span class=\"string\">\"Instantbird\"</span>,</div><div class=\"line\">                                                      category: <span class=\"string\">\"client\"</span>&#125;));</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"urn:xmpp:jingle:apps:rtp:video\"</span>&#125;));</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"urn:xmpp:jingle:apps:rtp:audio\"</span>&#125;));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Added to maintain interportability with other clients.</span></div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"http://www.google.com/xmpp/protocol/voice/v1\"</span>&#125;));</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"http://www.google.com/xmpp/protocol/video/v1\"</span>&#125;));</div><div class=\"line\">  queryStanza.addChild(Stanza.node(<span class=\"string\">\"feature\"</span>, <span class=\"literal\">null</span>, &#123;<span class=\"keyword\">var</span>: <span class=\"string\">\"http://www.google.com/xmpp/protocol/camera/v1\"</span>&#125;));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> queryStanza;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br>Now one of the prime task is to be able to actually detect our own video/audio devices and perform the video call only if the device is capable. For this we have used a callback method detectVideocapability() which detects the audio and video devices using <code>mozGetUserMediaDevices</code> and proceeds for the call only if the media devices are present.<br><figure class=\"highlight xml\"><figcaption><span>Media device discovery</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"detectVideoCapability\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parameter</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aSuccessCallback\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parameter</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aErrorCallback\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  &lt;![CDATA[</div><div class=\"line\">      navigator.mozGetUserMedia(&#123;audio: false, video: false&#125;,</div><div class=\"line\">                                function() &#123;&#125;, function() &#123;&#125;);</div><div class=\"line\"></div><div class=\"line\">      navigator.mozGetUserMediaDevices(&#123;video: true, audio: true&#125;,</div><div class=\"line\">                                       aSuccessCallback,</div><div class=\"line\">                                       aErrorCallback);</div><div class=\"line\">  ]]&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">method</span>&gt;</span></div></pre></td></tr></table></figure><br>The WIP for the entity capability implementation can be tracked at <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1025150\">Bug 1025150</a>.</p>\n"},{"title":"GSoC Progress Report","date":"2014-07-22T11:46:18.000Z","foreword":"The last week was dedicated mostly for making changes and landing the earlier bugs so that I can proceed with other patches already waiting to be fixed.","_content":"The last week was dedicated mostly for making changes and landing the earlier bugs so that I can proceed with other patches already waiting to be fixed. Here is a list of the things I did in the past week:\n\n*   Made some necessary changes for the [Bug: 975542 - Set user icon using webcam](https://bugzilla.mozilla.org/show_bug.cgi?id=975542) and it was added to the nightlies.\n*   Fixed the [Bug: 1004930 - Generic way to add toolbarbuttons](https://bugzilla.mozilla.org/show_bug.cgi?id=1004930). The toolbarbuttons are now aligned with the displayName which fixed the bottom border issue and it now has a better CSS too.\n*   Since [Bug:1018060 - Add video call support for XMPP](https://bugzilla.mozilla.org/show_bug.cgi?id=1018060) is probably the next patch which is going to land so it should be ready. I changed how the xml2sdp() generated the Jingle XML stanza from the SDP offer. The method looks clearer and is easy to understand now.\n*   Currently I’m working on the [Bug:1027779 - Inability to send call notification if no conversation has taken place before](https://bugzilla.mozilla.org/show_bug.cgi?id=1027779). This happens because the target resource has not been set and the user doesn’t know which is the most suitable resource to whom the notification should be sent. For this I need to find the most preferred resource available (i.e. the one for which voice call is supported) and then send the notification to only that resource.\n\nIn the upcoming week I’ll fix the Bug 1027779 and also try to land the video call patch.","source":"_posts/gsoc-progress-report.md","raw":"---\ntitle: GSoC Progress Report\ndate: 2014-07-22 17:16:18\nforeword: The last week was dedicated mostly for making changes and landing the earlier bugs so that I can proceed with other patches already waiting to be fixed.\n---\nThe last week was dedicated mostly for making changes and landing the earlier bugs so that I can proceed with other patches already waiting to be fixed. Here is a list of the things I did in the past week:\n\n*   Made some necessary changes for the [Bug: 975542 - Set user icon using webcam](https://bugzilla.mozilla.org/show_bug.cgi?id=975542) and it was added to the nightlies.\n*   Fixed the [Bug: 1004930 - Generic way to add toolbarbuttons](https://bugzilla.mozilla.org/show_bug.cgi?id=1004930). The toolbarbuttons are now aligned with the displayName which fixed the bottom border issue and it now has a better CSS too.\n*   Since [Bug:1018060 - Add video call support for XMPP](https://bugzilla.mozilla.org/show_bug.cgi?id=1018060) is probably the next patch which is going to land so it should be ready. I changed how the xml2sdp() generated the Jingle XML stanza from the SDP offer. The method looks clearer and is easy to understand now.\n*   Currently I’m working on the [Bug:1027779 - Inability to send call notification if no conversation has taken place before](https://bugzilla.mozilla.org/show_bug.cgi?id=1027779). This happens because the target resource has not been set and the user doesn’t know which is the most suitable resource to whom the notification should be sent. For this I need to find the most preferred resource available (i.e. the one for which voice call is supported) and then send the notification to only that resource.\n\nIn the upcoming week I’ll fix the Bug 1027779 and also try to land the video call patch.","slug":"gsoc-progress-report","published":1,"updated":"2016-08-05T13:16:42.000Z","_id":"cirhri1mz00009yv58gcl89h6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>The last week was dedicated mostly for making changes and landing the earlier bugs so that I can proceed with other patches already waiting to be fixed. Here is a list of the things I did in the past week:</p>\n<ul>\n<li>Made some necessary changes for the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=975542\" target=\"_blank\" rel=\"external\">Bug: 975542 - Set user icon using webcam</a> and it was added to the nightlies.</li>\n<li>Fixed the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1004930\" target=\"_blank\" rel=\"external\">Bug: 1004930 - Generic way to add toolbarbuttons</a>. The toolbarbuttons are now aligned with the displayName which fixed the bottom border issue and it now has a better CSS too.</li>\n<li>Since <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1018060\" target=\"_blank\" rel=\"external\">Bug:1018060 - Add video call support for XMPP</a> is probably the next patch which is going to land so it should be ready. I changed how the xml2sdp() generated the Jingle XML stanza from the SDP offer. The method looks clearer and is easy to understand now.</li>\n<li>Currently I’m working on the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1027779\" target=\"_blank\" rel=\"external\">Bug:1027779 - Inability to send call notification if no conversation has taken place before</a>. This happens because the target resource has not been set and the user doesn’t know which is the most suitable resource to whom the notification should be sent. For this I need to find the most preferred resource available (i.e. the one for which voice call is supported) and then send the notification to only that resource.</li>\n</ul>\n<p>In the upcoming week I’ll fix the Bug 1027779 and also try to land the video call patch.</p>\n","excerpt":"","more":"<p>The last week was dedicated mostly for making changes and landing the earlier bugs so that I can proceed with other patches already waiting to be fixed. Here is a list of the things I did in the past week:</p>\n<ul>\n<li>Made some necessary changes for the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=975542\">Bug: 975542 - Set user icon using webcam</a> and it was added to the nightlies.</li>\n<li>Fixed the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1004930\">Bug: 1004930 - Generic way to add toolbarbuttons</a>. The toolbarbuttons are now aligned with the displayName which fixed the bottom border issue and it now has a better CSS too.</li>\n<li>Since <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1018060\">Bug:1018060 - Add video call support for XMPP</a> is probably the next patch which is going to land so it should be ready. I changed how the xml2sdp() generated the Jingle XML stanza from the SDP offer. The method looks clearer and is easy to understand now.</li>\n<li>Currently I’m working on the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1027779\">Bug:1027779 - Inability to send call notification if no conversation has taken place before</a>. This happens because the target resource has not been set and the user doesn’t know which is the most suitable resource to whom the notification should be sent. For this I need to find the most preferred resource available (i.e. the one for which voice call is supported) and then send the notification to only that resource.</li>\n</ul>\n<p>In the upcoming week I’ll fix the Bug 1027779 and also try to land the video call patch.</p>\n"},{"title":"GSoC Wrap-up","date":"2014-07-22T11:46:18.000Z","foreword":"Its been long since I have blogged about my GSoC progress. I had been performing changes and nits for my patches so that they could land soon. I’m summarizing about some of my patches. You can check my code by visiting the Bug links.","_content":"Its been long since I have blogged about my GSoC progress. I had been performing changes and nits for my patches so that they could land soon. I’m summarizing about some of my patches. You can check my code by visiting the Bug links.\n\n* [Bug:1004930 - Generic way to add toolbarbutton:](https://bugzilla.mozilla.org/show_bug.cgi?id=1004930)After fixing the issues about the display of the buttons when viewed at smaller window size the patch is ready to land. It has greatly reduced the steps taken to add buttons in the conversation for different purposes/features.\n* [Bug:1018060 - Add video call support for XMPP:](https://bugzilla.mozilla.org/show_bug.cgi?id=1018060)Earlier I was using HTML Document to create the video call window, but Florian had a better idea that we should be using XBL binding for creating the UI. Thus, the UI now uses a simpler code to add the video call elements needed. I made further changes to the sdp2Xml and xml2Sdp and the backend XMPP code.\n* [Bug:1025150 - Implement Entity Capabilities in XMPP:](https://bugzilla.mozilla.org/show_bug.cgi?id=1025150)This patch now also stores capabilities info received from each resource and changes the availabilityDetails based on the current preferred resource. I made other changes to it as per the review comments.\n* [Bug:1027771 - Add fullscreen support for video calls:](https://bugzilla.mozilla.org/show_bug.cgi?id=1027771)This is a WIP using which we can now switch to fullscreen mode during a video call.\n\nNext I need to add better interface for the videoc calls when the user is using a wider window, implement Audio call support and to add suppport for hold/mute during video/audio calls.","source":"_posts/gsoc-wrap-up.md","raw":"---\ntitle: GSoC Wrap-up\ndate: 2014-07-22 17:16:18\nforeword: Its been long since I have blogged about my GSoC progress. I had been performing changes and nits for my patches so that they could land soon. I’m summarizing about some of my patches. You can check my code by visiting the Bug links.\n---\nIts been long since I have blogged about my GSoC progress. I had been performing changes and nits for my patches so that they could land soon. I’m summarizing about some of my patches. You can check my code by visiting the Bug links.\n\n* [Bug:1004930 - Generic way to add toolbarbutton:](https://bugzilla.mozilla.org/show_bug.cgi?id=1004930)After fixing the issues about the display of the buttons when viewed at smaller window size the patch is ready to land. It has greatly reduced the steps taken to add buttons in the conversation for different purposes/features.\n* [Bug:1018060 - Add video call support for XMPP:](https://bugzilla.mozilla.org/show_bug.cgi?id=1018060)Earlier I was using HTML Document to create the video call window, but Florian had a better idea that we should be using XBL binding for creating the UI. Thus, the UI now uses a simpler code to add the video call elements needed. I made further changes to the sdp2Xml and xml2Sdp and the backend XMPP code.\n* [Bug:1025150 - Implement Entity Capabilities in XMPP:](https://bugzilla.mozilla.org/show_bug.cgi?id=1025150)This patch now also stores capabilities info received from each resource and changes the availabilityDetails based on the current preferred resource. I made other changes to it as per the review comments.\n* [Bug:1027771 - Add fullscreen support for video calls:](https://bugzilla.mozilla.org/show_bug.cgi?id=1027771)This is a WIP using which we can now switch to fullscreen mode during a video call.\n\nNext I need to add better interface for the videoc calls when the user is using a wider window, implement Audio call support and to add suppport for hold/mute during video/audio calls.","slug":"gsoc-wrap-up","published":1,"updated":"2016-08-05T13:15:33.000Z","_id":"cirhrjwhi00019yv5chnmrlti","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Its been long since I have blogged about my GSoC progress. I had been performing changes and nits for my patches so that they could land soon. I’m summarizing about some of my patches. You can check my code by visiting the Bug links.</p>\n<ul>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1004930\" target=\"_blank\" rel=\"external\">Bug:1004930 - Generic way to add toolbarbutton:</a>After fixing the issues about the display of the buttons when viewed at smaller window size the patch is ready to land. It has greatly reduced the steps taken to add buttons in the conversation for different purposes/features.</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1018060\" target=\"_blank\" rel=\"external\">Bug:1018060 - Add video call support for XMPP:</a>Earlier I was using HTML Document to create the video call window, but Florian had a better idea that we should be using XBL binding for creating the UI. Thus, the UI now uses a simpler code to add the video call elements needed. I made further changes to the sdp2Xml and xml2Sdp and the backend XMPP code.</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1025150\" target=\"_blank\" rel=\"external\">Bug:1025150 - Implement Entity Capabilities in XMPP:</a>This patch now also stores capabilities info received from each resource and changes the availabilityDetails based on the current preferred resource. I made other changes to it as per the review comments.</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1027771\" target=\"_blank\" rel=\"external\">Bug:1027771 - Add fullscreen support for video calls:</a>This is a WIP using which we can now switch to fullscreen mode during a video call.</li>\n</ul>\n<p>Next I need to add better interface for the videoc calls when the user is using a wider window, implement Audio call support and to add suppport for hold/mute during video/audio calls.</p>\n","excerpt":"","more":"<p>Its been long since I have blogged about my GSoC progress. I had been performing changes and nits for my patches so that they could land soon. I’m summarizing about some of my patches. You can check my code by visiting the Bug links.</p>\n<ul>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1004930\">Bug:1004930 - Generic way to add toolbarbutton:</a>After fixing the issues about the display of the buttons when viewed at smaller window size the patch is ready to land. It has greatly reduced the steps taken to add buttons in the conversation for different purposes/features.</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1018060\">Bug:1018060 - Add video call support for XMPP:</a>Earlier I was using HTML Document to create the video call window, but Florian had a better idea that we should be using XBL binding for creating the UI. Thus, the UI now uses a simpler code to add the video call elements needed. I made further changes to the sdp2Xml and xml2Sdp and the backend XMPP code.</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1025150\">Bug:1025150 - Implement Entity Capabilities in XMPP:</a>This patch now also stores capabilities info received from each resource and changes the availabilityDetails based on the current preferred resource. I made other changes to it as per the review comments.</li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1027771\">Bug:1027771 - Add fullscreen support for video calls:</a>This is a WIP using which we can now switch to fullscreen mode during a video call.</li>\n</ul>\n<p>Next I need to add better interface for the videoc calls when the user is using a wider window, implement Audio call support and to add suppport for hold/mute during video/audio calls.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}